
LAB1_Ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002910  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a1c  08002a1c  00012a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a40  08002a40  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a40  08002a40  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a40  08002a40  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a40  08002a40  00012a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a44  08002a44  00012a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002a48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000006c  08002ab4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08002ab4  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b28  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd1  00000000  00000000  00029bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002b890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002c300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017148  00000000  00000000  0002cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c704  00000000  00000000  00043d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823f0  00000000  00000000  0005049c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d288c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002890  00000000  00000000  000d28e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a04 	.word	0x08002a04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08002a04 	.word	0x08002a04

0800014c <isButtonPressed>:

int TimeOutForKeyPress =  500;

int button_flag[MAX_BUTTON]={0, 0, 0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000088 	.word	0x20000088

08000180 <getKeyInput>:


void getKeyInput(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_BUTTON; i++){
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e078      	b.n	800027e <getKeyInput+0xfe>
		KeyReg2[i] = KeyReg1[i];
 800018c:	4a40      	ldr	r2, [pc, #256]	; (8000290 <getKeyInput+0x110>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	493f      	ldr	r1, [pc, #252]	; (8000294 <getKeyInput+0x114>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  KeyReg1[i] = KeyReg0[i];
 800019c:	4a3e      	ldr	r2, [pc, #248]	; (8000298 <getKeyInput+0x118>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	493a      	ldr	r1, [pc, #232]	; (8000290 <getKeyInput+0x110>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  KeyReg0[0] = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 80001ac:	2120      	movs	r1, #32
 80001ae:	483b      	ldr	r0, [pc, #236]	; (800029c <getKeyInput+0x11c>)
 80001b0:	f001 fbfc 	bl	80019ac <HAL_GPIO_ReadPin>
 80001b4:	4603      	mov	r3, r0
 80001b6:	461a      	mov	r2, r3
 80001b8:	4b37      	ldr	r3, [pc, #220]	; (8000298 <getKeyInput+0x118>)
 80001ba:	601a      	str	r2, [r3, #0]
		  KeyReg0[1] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80001bc:	2140      	movs	r1, #64	; 0x40
 80001be:	4837      	ldr	r0, [pc, #220]	; (800029c <getKeyInput+0x11c>)
 80001c0:	f001 fbf4 	bl	80019ac <HAL_GPIO_ReadPin>
 80001c4:	4603      	mov	r3, r0
 80001c6:	461a      	mov	r2, r3
 80001c8:	4b33      	ldr	r3, [pc, #204]	; (8000298 <getKeyInput+0x118>)
 80001ca:	605a      	str	r2, [r3, #4]
		  KeyReg0[2] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80001cc:	2180      	movs	r1, #128	; 0x80
 80001ce:	4833      	ldr	r0, [pc, #204]	; (800029c <getKeyInput+0x11c>)
 80001d0:	f001 fbec 	bl	80019ac <HAL_GPIO_ReadPin>
 80001d4:	4603      	mov	r3, r0
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b2f      	ldr	r3, [pc, #188]	; (8000298 <getKeyInput+0x118>)
 80001da:	609a      	str	r2, [r3, #8]

  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001dc:	4a2c      	ldr	r2, [pc, #176]	; (8000290 <getKeyInput+0x110>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e4:	492c      	ldr	r1, [pc, #176]	; (8000298 <getKeyInput+0x118>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001ec:	429a      	cmp	r2, r3
 80001ee:	d143      	bne.n	8000278 <getKeyInput+0xf8>
 80001f0:	4a27      	ldr	r2, [pc, #156]	; (8000290 <getKeyInput+0x110>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	4926      	ldr	r1, [pc, #152]	; (8000294 <getKeyInput+0x114>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d139      	bne.n	8000278 <getKeyInput+0xf8>
    if (KeyReg2[i] != KeyReg3[i]){
 8000204:	4a23      	ldr	r2, [pc, #140]	; (8000294 <getKeyInput+0x114>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4924      	ldr	r1, [pc, #144]	; (80002a0 <getKeyInput+0x120>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d017      	beq.n	8000248 <getKeyInput+0xc8>
      KeyReg3[i] = KeyReg2[i];
 8000218:	4a1e      	ldr	r2, [pc, #120]	; (8000294 <getKeyInput+0x114>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	491f      	ldr	r1, [pc, #124]	; (80002a0 <getKeyInput+0x120>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (KeyReg3[i] == PRESSED_STATE){
 8000228:	4a1d      	ldr	r2, [pc, #116]	; (80002a0 <getKeyInput+0x120>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d121      	bne.n	8000278 <getKeyInput+0xf8>
        TimeOutForKeyPress = 500;
 8000234:	4b1b      	ldr	r3, [pc, #108]	; (80002a4 <getKeyInput+0x124>)
 8000236:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800023a:	601a      	str	r2, [r3, #0]
        //subKeyProcess();
        button_flag[i] = 1;
 800023c:	4a1a      	ldr	r2, [pc, #104]	; (80002a8 <getKeyInput+0x128>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2101      	movs	r1, #1
 8000242:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000246:	e017      	b.n	8000278 <getKeyInput+0xf8>
      }

    }else{
        TimeOutForKeyPress --;
 8000248:	4b16      	ldr	r3, [pc, #88]	; (80002a4 <getKeyInput+0x124>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	3b01      	subs	r3, #1
 800024e:	4a15      	ldr	r2, [pc, #84]	; (80002a4 <getKeyInput+0x124>)
 8000250:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 8000252:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <getKeyInput+0x124>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d10e      	bne.n	8000278 <getKeyInput+0xf8>
        	TimeOutForKeyPress = 500;
 800025a:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <getKeyInput+0x124>)
 800025c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000260:	601a      	str	r2, [r3, #0]
        	if (KeyReg3[i] == PRESSED_STATE){
 8000262:	4a0f      	ldr	r2, [pc, #60]	; (80002a0 <getKeyInput+0x120>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d104      	bne.n	8000278 <getKeyInput+0xf8>
        		//subKeyProcess();
        		button_flag[i] = 1;
 800026e:	4a0e      	ldr	r2, [pc, #56]	; (80002a8 <getKeyInput+0x128>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2101      	movs	r1, #1
 8000274:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<MAX_BUTTON; i++){
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3301      	adds	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b02      	cmp	r3, #2
 8000282:	dd83      	ble.n	800018c <getKeyInput+0xc>
        	}
        }
    }
  }
 }
}
 8000284:	bf00      	nop
 8000286:	bf00      	nop
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	2000000c 	.word	0x2000000c
 8000294:	20000018 	.word	0x20000018
 8000298:	20000000 	.word	0x20000000
 800029c:	40010800 	.word	0x40010800
 80002a0:	20000024 	.word	0x20000024
 80002a4:	20000030 	.word	0x20000030
 80002a8:	20000088 	.word	0x20000088

080002ac <display7SEG>:
	  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
	  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
}


void display7SEG(int num){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2b09      	cmp	r3, #9
 80002b8:	f200 81b2 	bhi.w	8000620 <display7SEG+0x374>
 80002bc:	a201      	add	r2, pc, #4	; (adr r2, 80002c4 <display7SEG+0x18>)
 80002be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c2:	bf00      	nop
 80002c4:	080002ed 	.word	0x080002ed
 80002c8:	0800033f 	.word	0x0800033f
 80002cc:	08000391 	.word	0x08000391
 80002d0:	080003e3 	.word	0x080003e3
 80002d4:	08000435 	.word	0x08000435
 80002d8:	08000487 	.word	0x08000487
 80002dc:	080004d9 	.word	0x080004d9
 80002e0:	0800052b 	.word	0x0800052b
 80002e4:	0800057d 	.word	0x0800057d
 80002e8:	080005cf 	.word	0x080005cf
	switch(num){
				  case 0:
					  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2140      	movs	r1, #64	; 0x40
 80002f0:	48ce      	ldr	r0, [pc, #824]	; (800062c <display7SEG+0x380>)
 80002f2:	f001 fb72 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2180      	movs	r1, #128	; 0x80
 80002fa:	48cc      	ldr	r0, [pc, #816]	; (800062c <display7SEG+0x380>)
 80002fc:	f001 fb6d 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000300:	2200      	movs	r2, #0
 8000302:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000306:	48c9      	ldr	r0, [pc, #804]	; (800062c <display7SEG+0x380>)
 8000308:	f001 fb67 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000312:	48c6      	ldr	r0, [pc, #792]	; (800062c <display7SEG+0x380>)
 8000314:	f001 fb61 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800031e:	48c3      	ldr	r0, [pc, #780]	; (800062c <display7SEG+0x380>)
 8000320:	f001 fb5b 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800032a:	48c0      	ldr	r0, [pc, #768]	; (800062c <display7SEG+0x380>)
 800032c:	f001 fb55 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000330:	2201      	movs	r2, #1
 8000332:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000336:	48bd      	ldr	r0, [pc, #756]	; (800062c <display7SEG+0x380>)
 8000338:	f001 fb4f 	bl	80019da <HAL_GPIO_WritePin>
					  break;
 800033c:	e171      	b.n	8000622 <display7SEG+0x376>
				  case 1:
					  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 800033e:	2201      	movs	r2, #1
 8000340:	2140      	movs	r1, #64	; 0x40
 8000342:	48ba      	ldr	r0, [pc, #744]	; (800062c <display7SEG+0x380>)
 8000344:	f001 fb49 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2180      	movs	r1, #128	; 0x80
 800034c:	48b7      	ldr	r0, [pc, #732]	; (800062c <display7SEG+0x380>)
 800034e:	f001 fb44 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000358:	48b4      	ldr	r0, [pc, #720]	; (800062c <display7SEG+0x380>)
 800035a:	f001 fb3e 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 800035e:	2201      	movs	r2, #1
 8000360:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000364:	48b1      	ldr	r0, [pc, #708]	; (800062c <display7SEG+0x380>)
 8000366:	f001 fb38 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000370:	48ae      	ldr	r0, [pc, #696]	; (800062c <display7SEG+0x380>)
 8000372:	f001 fb32 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000376:	2201      	movs	r2, #1
 8000378:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800037c:	48ab      	ldr	r0, [pc, #684]	; (800062c <display7SEG+0x380>)
 800037e:	f001 fb2c 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000382:	2201      	movs	r2, #1
 8000384:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000388:	48a8      	ldr	r0, [pc, #672]	; (800062c <display7SEG+0x380>)
 800038a:	f001 fb26 	bl	80019da <HAL_GPIO_WritePin>
					  break;
 800038e:	e148      	b.n	8000622 <display7SEG+0x376>
				  case 2:
					  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2140      	movs	r1, #64	; 0x40
 8000394:	48a5      	ldr	r0, [pc, #660]	; (800062c <display7SEG+0x380>)
 8000396:	f001 fb20 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	2180      	movs	r1, #128	; 0x80
 800039e:	48a3      	ldr	r0, [pc, #652]	; (800062c <display7SEG+0x380>)
 80003a0:	f001 fb1b 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 80003a4:	2201      	movs	r2, #1
 80003a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003aa:	48a0      	ldr	r0, [pc, #640]	; (800062c <display7SEG+0x380>)
 80003ac:	f001 fb15 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b6:	489d      	ldr	r0, [pc, #628]	; (800062c <display7SEG+0x380>)
 80003b8:	f001 fb0f 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c2:	489a      	ldr	r0, [pc, #616]	; (800062c <display7SEG+0x380>)
 80003c4:	f001 fb09 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003ce:	4897      	ldr	r0, [pc, #604]	; (800062c <display7SEG+0x380>)
 80003d0:	f001 fb03 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003da:	4894      	ldr	r0, [pc, #592]	; (800062c <display7SEG+0x380>)
 80003dc:	f001 fafd 	bl	80019da <HAL_GPIO_WritePin>
					  break;
 80003e0:	e11f      	b.n	8000622 <display7SEG+0x376>
				  case 3:
					  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2140      	movs	r1, #64	; 0x40
 80003e6:	4891      	ldr	r0, [pc, #580]	; (800062c <display7SEG+0x380>)
 80003e8:	f001 faf7 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2180      	movs	r1, #128	; 0x80
 80003f0:	488e      	ldr	r0, [pc, #568]	; (800062c <display7SEG+0x380>)
 80003f2:	f001 faf2 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003fc:	488b      	ldr	r0, [pc, #556]	; (800062c <display7SEG+0x380>)
 80003fe:	f001 faec 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000408:	4888      	ldr	r0, [pc, #544]	; (800062c <display7SEG+0x380>)
 800040a:	f001 fae6 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 800040e:	2201      	movs	r2, #1
 8000410:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000414:	4885      	ldr	r0, [pc, #532]	; (800062c <display7SEG+0x380>)
 8000416:	f001 fae0 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 800041a:	2201      	movs	r2, #1
 800041c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000420:	4882      	ldr	r0, [pc, #520]	; (800062c <display7SEG+0x380>)
 8000422:	f001 fada 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000426:	2200      	movs	r2, #0
 8000428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800042c:	487f      	ldr	r0, [pc, #508]	; (800062c <display7SEG+0x380>)
 800042e:	f001 fad4 	bl	80019da <HAL_GPIO_WritePin>
					  break;
 8000432:	e0f6      	b.n	8000622 <display7SEG+0x376>
				  case 4:
					  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000434:	2201      	movs	r2, #1
 8000436:	2140      	movs	r1, #64	; 0x40
 8000438:	487c      	ldr	r0, [pc, #496]	; (800062c <display7SEG+0x380>)
 800043a:	f001 face 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	2180      	movs	r1, #128	; 0x80
 8000442:	487a      	ldr	r0, [pc, #488]	; (800062c <display7SEG+0x380>)
 8000444:	f001 fac9 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800044e:	4877      	ldr	r0, [pc, #476]	; (800062c <display7SEG+0x380>)
 8000450:	f001 fac3 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000454:	2201      	movs	r2, #1
 8000456:	f44f 7100 	mov.w	r1, #512	; 0x200
 800045a:	4874      	ldr	r0, [pc, #464]	; (800062c <display7SEG+0x380>)
 800045c:	f001 fabd 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000460:	2201      	movs	r2, #1
 8000462:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000466:	4871      	ldr	r0, [pc, #452]	; (800062c <display7SEG+0x380>)
 8000468:	f001 fab7 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000472:	486e      	ldr	r0, [pc, #440]	; (800062c <display7SEG+0x380>)
 8000474:	f001 fab1 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800047e:	486b      	ldr	r0, [pc, #428]	; (800062c <display7SEG+0x380>)
 8000480:	f001 faab 	bl	80019da <HAL_GPIO_WritePin>
					  break;
 8000484:	e0cd      	b.n	8000622 <display7SEG+0x376>
				  case 5:
					  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	2140      	movs	r1, #64	; 0x40
 800048a:	4868      	ldr	r0, [pc, #416]	; (800062c <display7SEG+0x380>)
 800048c:	f001 faa5 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000490:	2201      	movs	r2, #1
 8000492:	2180      	movs	r1, #128	; 0x80
 8000494:	4865      	ldr	r0, [pc, #404]	; (800062c <display7SEG+0x380>)
 8000496:	f001 faa0 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a0:	4862      	ldr	r0, [pc, #392]	; (800062c <display7SEG+0x380>)
 80004a2:	f001 fa9a 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ac:	485f      	ldr	r0, [pc, #380]	; (800062c <display7SEG+0x380>)
 80004ae:	f001 fa94 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b8:	485c      	ldr	r0, [pc, #368]	; (800062c <display7SEG+0x380>)
 80004ba:	f001 fa8e 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004c4:	4859      	ldr	r0, [pc, #356]	; (800062c <display7SEG+0x380>)
 80004c6:	f001 fa88 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004d0:	4856      	ldr	r0, [pc, #344]	; (800062c <display7SEG+0x380>)
 80004d2:	f001 fa82 	bl	80019da <HAL_GPIO_WritePin>
					  break;
 80004d6:	e0a4      	b.n	8000622 <display7SEG+0x376>
				  case 6:
					  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2140      	movs	r1, #64	; 0x40
 80004dc:	4853      	ldr	r0, [pc, #332]	; (800062c <display7SEG+0x380>)
 80004de:	f001 fa7c 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 80004e2:	2201      	movs	r2, #1
 80004e4:	2180      	movs	r1, #128	; 0x80
 80004e6:	4851      	ldr	r0, [pc, #324]	; (800062c <display7SEG+0x380>)
 80004e8:	f001 fa77 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f2:	484e      	ldr	r0, [pc, #312]	; (800062c <display7SEG+0x380>)
 80004f4:	f001 fa71 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004fe:	484b      	ldr	r0, [pc, #300]	; (800062c <display7SEG+0x380>)
 8000500:	f001 fa6b 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800050a:	4848      	ldr	r0, [pc, #288]	; (800062c <display7SEG+0x380>)
 800050c:	f001 fa65 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000516:	4845      	ldr	r0, [pc, #276]	; (800062c <display7SEG+0x380>)
 8000518:	f001 fa5f 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000522:	4842      	ldr	r0, [pc, #264]	; (800062c <display7SEG+0x380>)
 8000524:	f001 fa59 	bl	80019da <HAL_GPIO_WritePin>
					  break;
 8000528:	e07b      	b.n	8000622 <display7SEG+0x376>
				  case 7:
					  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	2140      	movs	r1, #64	; 0x40
 800052e:	483f      	ldr	r0, [pc, #252]	; (800062c <display7SEG+0x380>)
 8000530:	f001 fa53 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	2180      	movs	r1, #128	; 0x80
 8000538:	483c      	ldr	r0, [pc, #240]	; (800062c <display7SEG+0x380>)
 800053a:	f001 fa4e 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000544:	4839      	ldr	r0, [pc, #228]	; (800062c <display7SEG+0x380>)
 8000546:	f001 fa48 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 800054a:	2201      	movs	r2, #1
 800054c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000550:	4836      	ldr	r0, [pc, #216]	; (800062c <display7SEG+0x380>)
 8000552:	f001 fa42 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800055c:	4833      	ldr	r0, [pc, #204]	; (800062c <display7SEG+0x380>)
 800055e:	f001 fa3c 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000562:	2201      	movs	r2, #1
 8000564:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000568:	4830      	ldr	r0, [pc, #192]	; (800062c <display7SEG+0x380>)
 800056a:	f001 fa36 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000574:	482d      	ldr	r0, [pc, #180]	; (800062c <display7SEG+0x380>)
 8000576:	f001 fa30 	bl	80019da <HAL_GPIO_WritePin>
					  break;
 800057a:	e052      	b.n	8000622 <display7SEG+0x376>
				  case 8:
					  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2140      	movs	r1, #64	; 0x40
 8000580:	482a      	ldr	r0, [pc, #168]	; (800062c <display7SEG+0x380>)
 8000582:	f001 fa2a 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	4828      	ldr	r0, [pc, #160]	; (800062c <display7SEG+0x380>)
 800058c:	f001 fa25 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000596:	4825      	ldr	r0, [pc, #148]	; (800062c <display7SEG+0x380>)
 8000598:	f001 fa1f 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a2:	4822      	ldr	r0, [pc, #136]	; (800062c <display7SEG+0x380>)
 80005a4:	f001 fa19 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ae:	481f      	ldr	r0, [pc, #124]	; (800062c <display7SEG+0x380>)
 80005b0:	f001 fa13 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ba:	481c      	ldr	r0, [pc, #112]	; (800062c <display7SEG+0x380>)
 80005bc:	f001 fa0d 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c6:	4819      	ldr	r0, [pc, #100]	; (800062c <display7SEG+0x380>)
 80005c8:	f001 fa07 	bl	80019da <HAL_GPIO_WritePin>
					  break;
 80005cc:	e029      	b.n	8000622 <display7SEG+0x376>
				  case 9:
					  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2140      	movs	r1, #64	; 0x40
 80005d2:	4816      	ldr	r0, [pc, #88]	; (800062c <display7SEG+0x380>)
 80005d4:	f001 fa01 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2180      	movs	r1, #128	; 0x80
 80005dc:	4813      	ldr	r0, [pc, #76]	; (800062c <display7SEG+0x380>)
 80005de:	f001 f9fc 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e8:	4810      	ldr	r0, [pc, #64]	; (800062c <display7SEG+0x380>)
 80005ea:	f001 f9f6 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <display7SEG+0x380>)
 80005f6:	f001 f9f0 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000600:	480a      	ldr	r0, [pc, #40]	; (800062c <display7SEG+0x380>)
 8000602:	f001 f9ea 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800060c:	4807      	ldr	r0, [pc, #28]	; (800062c <display7SEG+0x380>)
 800060e:	f001 f9e4 	bl	80019da <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <display7SEG+0x380>)
 800061a:	f001 f9de 	bl	80019da <HAL_GPIO_WritePin>
					  break;
 800061e:	e000      	b.n	8000622 <display7SEG+0x376>
				  default:
				      break;
 8000620:	bf00      	nop
			}
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40010c00 	.word	0x40010c00

08000630 <update7SEG>:

const unsigned int MAX_LED = 4;

int index_led=0;
void update7SEG(int index){
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	index=index_led%4;
 8000638:	4b42      	ldr	r3, [pc, #264]	; (8000744 <update7SEG+0x114>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	425a      	negs	r2, r3
 800063e:	f003 0303 	and.w	r3, r3, #3
 8000642:	f002 0203 	and.w	r2, r2, #3
 8000646:	bf58      	it	pl
 8000648:	4253      	negpl	r3, r2
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b03      	cmp	r3, #3
 8000650:	d872      	bhi.n	8000738 <update7SEG+0x108>
 8000652:	a201      	add	r2, pc, #4	; (adr r2, 8000658 <update7SEG+0x28>)
 8000654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000658:	08000669 	.word	0x08000669
 800065c:	0800069d 	.word	0x0800069d
 8000660:	080006d1 	.word	0x080006d1
 8000664:	08000705 	.word	0x08000705
	switch (index) {
		case 0:
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2102      	movs	r1, #2
 800066c:	4836      	ldr	r0, [pc, #216]	; (8000748 <update7SEG+0x118>)
 800066e:	f001 f9b4 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000672:	2201      	movs	r2, #1
 8000674:	2104      	movs	r1, #4
 8000676:	4834      	ldr	r0, [pc, #208]	; (8000748 <update7SEG+0x118>)
 8000678:	f001 f9af 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800067c:	2201      	movs	r2, #1
 800067e:	2108      	movs	r1, #8
 8000680:	4831      	ldr	r0, [pc, #196]	; (8000748 <update7SEG+0x118>)
 8000682:	f001 f9aa 	bl	80019da <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 8000686:	2201      	movs	r2, #1
 8000688:	2110      	movs	r1, #16
 800068a:	482f      	ldr	r0, [pc, #188]	; (8000748 <update7SEG+0x118>)
 800068c:	f001 f9a5 	bl	80019da <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 8000690:	4b2e      	ldr	r3, [pc, #184]	; (800074c <update7SEG+0x11c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff fe09 	bl	80002ac <display7SEG>
			break;
 800069a:	e04e      	b.n	800073a <update7SEG+0x10a>
		case 1:
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800069c:	2201      	movs	r2, #1
 800069e:	2102      	movs	r1, #2
 80006a0:	4829      	ldr	r0, [pc, #164]	; (8000748 <update7SEG+0x118>)
 80006a2:	f001 f99a 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2104      	movs	r1, #4
 80006aa:	4827      	ldr	r0, [pc, #156]	; (8000748 <update7SEG+0x118>)
 80006ac:	f001 f995 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2108      	movs	r1, #8
 80006b4:	4824      	ldr	r0, [pc, #144]	; (8000748 <update7SEG+0x118>)
 80006b6:	f001 f990 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2110      	movs	r1, #16
 80006be:	4822      	ldr	r0, [pc, #136]	; (8000748 <update7SEG+0x118>)
 80006c0:	f001 f98b 	bl	80019da <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 80006c4:	4b21      	ldr	r3, [pc, #132]	; (800074c <update7SEG+0x11c>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fdef 	bl	80002ac <display7SEG>
			break;
 80006ce:	e034      	b.n	800073a <update7SEG+0x10a>
		case 2:
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2102      	movs	r1, #2
 80006d4:	481c      	ldr	r0, [pc, #112]	; (8000748 <update7SEG+0x118>)
 80006d6:	f001 f980 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2104      	movs	r1, #4
 80006de:	481a      	ldr	r0, [pc, #104]	; (8000748 <update7SEG+0x118>)
 80006e0:	f001 f97b 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2108      	movs	r1, #8
 80006e8:	4817      	ldr	r0, [pc, #92]	; (8000748 <update7SEG+0x118>)
 80006ea:	f001 f976 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	2110      	movs	r1, #16
 80006f2:	4815      	ldr	r0, [pc, #84]	; (8000748 <update7SEG+0x118>)
 80006f4:	f001 f971 	bl	80019da <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <update7SEG+0x11c>)
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fdd5 	bl	80002ac <display7SEG>
			break;
 8000702:	e01a      	b.n	800073a <update7SEG+0x10a>
		case 3:
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2102      	movs	r1, #2
 8000708:	480f      	ldr	r0, [pc, #60]	; (8000748 <update7SEG+0x118>)
 800070a:	f001 f966 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800070e:	2201      	movs	r2, #1
 8000710:	2104      	movs	r1, #4
 8000712:	480d      	ldr	r0, [pc, #52]	; (8000748 <update7SEG+0x118>)
 8000714:	f001 f961 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000718:	2201      	movs	r2, #1
 800071a:	2108      	movs	r1, #8
 800071c:	480a      	ldr	r0, [pc, #40]	; (8000748 <update7SEG+0x118>)
 800071e:	f001 f95c 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2110      	movs	r1, #16
 8000726:	4808      	ldr	r0, [pc, #32]	; (8000748 <update7SEG+0x118>)
 8000728:	f001 f957 	bl	80019da <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <update7SEG+0x11c>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fdbb 	bl	80002ac <display7SEG>
			break;
 8000736:	e000      	b.n	800073a <update7SEG+0x10a>
		default:
			break;
 8000738:	bf00      	nop
	}
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000094 	.word	0x20000094
 8000748:	40010800 	.word	0x40010800
 800074c:	20000044 	.word	0x20000044

08000750 <led7_run>:

void led7_run(){
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	led_buffer[3]=counterB%10;
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <led7_run+0x90>)
 8000756:	6819      	ldr	r1, [r3, #0]
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <led7_run+0x94>)
 800075a:	fb83 2301 	smull	r2, r3, r3, r1
 800075e:	109a      	asrs	r2, r3, #2
 8000760:	17cb      	asrs	r3, r1, #31
 8000762:	1ad2      	subs	r2, r2, r3
 8000764:	4613      	mov	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	4413      	add	r3, r2
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	1aca      	subs	r2, r1, r3
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <led7_run+0x98>)
 8000770:	60da      	str	r2, [r3, #12]
	led_buffer[2]=counterB/10;
 8000772:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <led7_run+0x90>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a1b      	ldr	r2, [pc, #108]	; (80007e4 <led7_run+0x94>)
 8000778:	fb82 1203 	smull	r1, r2, r2, r3
 800077c:	1092      	asrs	r2, r2, #2
 800077e:	17db      	asrs	r3, r3, #31
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	4a19      	ldr	r2, [pc, #100]	; (80007e8 <led7_run+0x98>)
 8000784:	6093      	str	r3, [r2, #8]
	led_buffer[1]=counterA%10;
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <led7_run+0x9c>)
 8000788:	6819      	ldr	r1, [r3, #0]
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <led7_run+0x94>)
 800078c:	fb83 2301 	smull	r2, r3, r3, r1
 8000790:	109a      	asrs	r2, r3, #2
 8000792:	17cb      	asrs	r3, r1, #31
 8000794:	1ad2      	subs	r2, r2, r3
 8000796:	4613      	mov	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	4413      	add	r3, r2
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	1aca      	subs	r2, r1, r3
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <led7_run+0x98>)
 80007a2:	605a      	str	r2, [r3, #4]
	led_buffer[0]=counterA/10;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <led7_run+0x9c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <led7_run+0x94>)
 80007aa:	fb82 1203 	smull	r1, r2, r2, r3
 80007ae:	1092      	asrs	r2, r2, #2
 80007b0:	17db      	asrs	r3, r3, #31
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	4a0c      	ldr	r2, [pc, #48]	; (80007e8 <led7_run+0x98>)
 80007b6:	6013      	str	r3, [r2, #0]
	if(isTimerExpired(2)==1){
 80007b8:	2002      	movs	r0, #2
 80007ba:	f000 f86b 	bl	8000894 <isTimerExpired>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d10b      	bne.n	80007dc <led7_run+0x8c>
		setTimer(2, 100);
 80007c4:	2164      	movs	r1, #100	; 0x64
 80007c6:	2002      	movs	r0, #2
 80007c8:	f000 f814 	bl	80007f4 <setTimer>
		update7SEG(index_led++);
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <led7_run+0xa0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	1c5a      	adds	r2, r3, #1
 80007d2:	4907      	ldr	r1, [pc, #28]	; (80007f0 <led7_run+0xa0>)
 80007d4:	600a      	str	r2, [r1, #0]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff2a 	bl	8000630 <update7SEG>
	 }
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000038 	.word	0x20000038
 80007e4:	66666667 	.word	0x66666667
 80007e8:	20000044 	.word	0x20000044
 80007ec:	20000034 	.word	0x20000034
 80007f0:	20000094 	.word	0x20000094

080007f4 <setTimer>:
#include "Software.h"

int timerCounter[10];
int timerFlag[10];

void setTimer(int index, int counter){
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
	timerCounter[index]=counter/10;
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	4a09      	ldr	r2, [pc, #36]	; (8000828 <setTimer+0x34>)
 8000802:	fb82 1203 	smull	r1, r2, r2, r3
 8000806:	1092      	asrs	r2, r2, #2
 8000808:	17db      	asrs	r3, r3, #31
 800080a:	1ad2      	subs	r2, r2, r3
 800080c:	4907      	ldr	r1, [pc, #28]	; (800082c <setTimer+0x38>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timerFlag[index]=0;
 8000814:	4a06      	ldr	r2, [pc, #24]	; (8000830 <setTimer+0x3c>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2100      	movs	r1, #0
 800081a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	66666667 	.word	0x66666667
 800082c:	200000cc 	.word	0x200000cc
 8000830:	200000a4 	.word	0x200000a4

08000834 <timeRun>:
	timerCounter[i]=0;
	timerFlag[i]=0;
	}
}

void timeRun(){
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
	for(int i=0;i<10;i++){
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	e01c      	b.n	800087a <timeRun+0x46>
		if(timerCounter[i]>=0){
 8000840:	4a12      	ldr	r2, [pc, #72]	; (800088c <timeRun+0x58>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000848:	2b00      	cmp	r3, #0
 800084a:	db13      	blt.n	8000874 <timeRun+0x40>
			timerCounter[i]--;
 800084c:	4a0f      	ldr	r2, [pc, #60]	; (800088c <timeRun+0x58>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000854:	1e5a      	subs	r2, r3, #1
 8000856:	490d      	ldr	r1, [pc, #52]	; (800088c <timeRun+0x58>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timerCounter[i]<=0){
 800085e:	4a0b      	ldr	r2, [pc, #44]	; (800088c <timeRun+0x58>)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000866:	2b00      	cmp	r3, #0
 8000868:	dc04      	bgt.n	8000874 <timeRun+0x40>
				timerFlag[i]=1;
 800086a:	4a09      	ldr	r2, [pc, #36]	; (8000890 <timeRun+0x5c>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2101      	movs	r1, #1
 8000870:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<10;i++){
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3301      	adds	r3, #1
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b09      	cmp	r3, #9
 800087e:	dddf      	ble.n	8000840 <timeRun+0xc>
			}
		}
	}
}
 8000880:	bf00      	nop
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	200000cc 	.word	0x200000cc
 8000890:	200000a4 	.word	0x200000a4

08000894 <isTimerExpired>:

int isTimerExpired(int index){
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	if(timerFlag[index]==1){
 800089c:	4a09      	ldr	r2, [pc, #36]	; (80008c4 <isTimerExpired+0x30>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d106      	bne.n	80008b6 <isTimerExpired+0x22>
		timerFlag[index]=0;
 80008a8:	4a06      	ldr	r2, [pc, #24]	; (80008c4 <isTimerExpired+0x30>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2100      	movs	r1, #0
 80008ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e000      	b.n	80008b8 <isTimerExpired+0x24>
	}
	else
	return 0;
 80008b6:	2300      	movs	r3, #0
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	200000a4 	.word	0x200000a4

080008c8 <TurnOnRed_A>:
	    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, SET);
	    HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, SET);
	    HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, SET);
}

void TurnOnRed_A(){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
		  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2101      	movs	r1, #1
 80008d0:	4807      	ldr	r0, [pc, #28]	; (80008f0 <TurnOnRed_A+0x28>)
 80008d2:	f001 f882 	bl	80019da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2102      	movs	r1, #2
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <TurnOnRed_A+0x28>)
 80008dc:	f001 f87d 	bl	80019da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2104      	movs	r1, #4
 80008e4:	4802      	ldr	r0, [pc, #8]	; (80008f0 <TurnOnRed_A+0x28>)
 80008e6:	f001 f878 	bl	80019da <HAL_GPIO_WritePin>
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40010c00 	.word	0x40010c00

080008f4 <TurnOnYellow_A>:
void TurnOnYellow_A(){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
		  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2101      	movs	r1, #1
 80008fc:	4807      	ldr	r0, [pc, #28]	; (800091c <TurnOnYellow_A+0x28>)
 80008fe:	f001 f86c 	bl	80019da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, SET);
 8000902:	2201      	movs	r2, #1
 8000904:	2102      	movs	r1, #2
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <TurnOnYellow_A+0x28>)
 8000908:	f001 f867 	bl	80019da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2104      	movs	r1, #4
 8000910:	4802      	ldr	r0, [pc, #8]	; (800091c <TurnOnYellow_A+0x28>)
 8000912:	f001 f862 	bl	80019da <HAL_GPIO_WritePin>
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40010c00 	.word	0x40010c00

08000920 <TurnOnGreen_A>:
void TurnOnGreen_A(){
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
		  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2101      	movs	r1, #1
 8000928:	4807      	ldr	r0, [pc, #28]	; (8000948 <TurnOnGreen_A+0x28>)
 800092a:	f001 f856 	bl	80019da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2102      	movs	r1, #2
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <TurnOnGreen_A+0x28>)
 8000934:	f001 f851 	bl	80019da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2104      	movs	r1, #4
 800093c:	4802      	ldr	r0, [pc, #8]	; (8000948 <TurnOnGreen_A+0x28>)
 800093e:	f001 f84c 	bl	80019da <HAL_GPIO_WritePin>
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40010c00 	.word	0x40010c00

0800094c <TurnOnGreen_B>:
void TurnOnGreen_B(){
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
		  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, SET);
 8000950:	2201      	movs	r2, #1
 8000952:	2108      	movs	r1, #8
 8000954:	4807      	ldr	r0, [pc, #28]	; (8000974 <TurnOnGreen_B+0x28>)
 8000956:	f001 f840 	bl	80019da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2110      	movs	r1, #16
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <TurnOnGreen_B+0x28>)
 8000960:	f001 f83b 	bl	80019da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2120      	movs	r1, #32
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <TurnOnGreen_B+0x28>)
 800096a:	f001 f836 	bl	80019da <HAL_GPIO_WritePin>
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40010c00 	.word	0x40010c00

08000978 <TurnOnRed_B>:
void TurnOnRed_B(){
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
		  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	2108      	movs	r1, #8
 8000980:	4807      	ldr	r0, [pc, #28]	; (80009a0 <TurnOnRed_B+0x28>)
 8000982:	f001 f82a 	bl	80019da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2110      	movs	r1, #16
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <TurnOnRed_B+0x28>)
 800098c:	f001 f825 	bl	80019da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2120      	movs	r1, #32
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <TurnOnRed_B+0x28>)
 8000996:	f001 f820 	bl	80019da <HAL_GPIO_WritePin>
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40010c00 	.word	0x40010c00

080009a4 <TurnOnYellow_B>:
void TurnOnYellow_B(){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
		  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2108      	movs	r1, #8
 80009ac:	4807      	ldr	r0, [pc, #28]	; (80009cc <TurnOnYellow_B+0x28>)
 80009ae:	f001 f814 	bl	80019da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2110      	movs	r1, #16
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <TurnOnYellow_B+0x28>)
 80009b8:	f001 f80f 	bl	80019da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2120      	movs	r1, #32
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <TurnOnYellow_B+0x28>)
 80009c2:	f001 f80a 	bl	80019da <HAL_GPIO_WritePin>
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40010c00 	.word	0x40010c00

080009d0 <fsm_automatic_run>:
 *  Created on: Oct 27, 2024
 *      Author: Song Thuy
 */
#include "fsm_automatic.h"

void fsm_automatic_run(){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
    led7_run();
 80009d4:	f7ff febc 	bl	8000750 <led7_run>
	switch(status_A){
 80009d8:	4bb2      	ldr	r3, [pc, #712]	; (8000ca4 <fsm_automatic_run+0x2d4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b05      	cmp	r3, #5
 80009de:	d007      	beq.n	80009f0 <fsm_automatic_run+0x20>
 80009e0:	2b05      	cmp	r3, #5
 80009e2:	f300 80b6 	bgt.w	8000b52 <fsm_automatic_run+0x182>
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d03d      	beq.n	8000a66 <fsm_automatic_run+0x96>
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	d076      	beq.n	8000adc <fsm_automatic_run+0x10c>
					  status_A=manual_init;
					  status_B=manual_init;
				  }
				  break;
			  default:
				  break;
 80009ee:	e0b0      	b.n	8000b52 <fsm_automatic_run+0x182>
			 TurnOnRed_A();
 80009f0:	f7ff ff6a 	bl	80008c8 <TurnOnRed_A>
				  if(isTimerExpired(0)==1){
 80009f4:	2000      	movs	r0, #0
 80009f6:	f7ff ff4d 	bl	8000894 <isTimerExpired>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d115      	bne.n	8000a2c <fsm_automatic_run+0x5c>
					  status_A=GREEN;
 8000a00:	4ba8      	ldr	r3, [pc, #672]	; (8000ca4 <fsm_automatic_run+0x2d4>)
 8000a02:	2203      	movs	r2, #3
 8000a04:	601a      	str	r2, [r3, #0]
					  setTimer(0, green*1000);
 8000a06:	4ba8      	ldr	r3, [pc, #672]	; (8000ca8 <fsm_automatic_run+0x2d8>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a0e:	fb02 f303 	mul.w	r3, r2, r3
 8000a12:	4619      	mov	r1, r3
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff feed 	bl	80007f4 <setTimer>
					  setTimer(3, 1000);
 8000a1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a1e:	2003      	movs	r0, #3
 8000a20:	f7ff fee8 	bl	80007f4 <setTimer>
					  counterA=green;
 8000a24:	4ba0      	ldr	r3, [pc, #640]	; (8000ca8 <fsm_automatic_run+0x2d8>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4aa0      	ldr	r2, [pc, #640]	; (8000cac <fsm_automatic_run+0x2dc>)
 8000a2a:	6013      	str	r3, [r2, #0]
				  if(isTimerExpired(3)==1){
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f7ff ff31 	bl	8000894 <isTimerExpired>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d109      	bne.n	8000a4c <fsm_automatic_run+0x7c>
					  setTimer(3, 1000);
 8000a38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f7ff fed9 	bl	80007f4 <setTimer>
					  counterA--;
 8000a42:	4b9a      	ldr	r3, [pc, #616]	; (8000cac <fsm_automatic_run+0x2dc>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	4a98      	ldr	r2, [pc, #608]	; (8000cac <fsm_automatic_run+0x2dc>)
 8000a4a:	6013      	str	r3, [r2, #0]
				  if(isButtonPressed(0)==1){
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f7ff fb7d 	bl	800014c <isButtonPressed>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d17e      	bne.n	8000b56 <fsm_automatic_run+0x186>
					  status_A=manual_init;
 8000a58:	4b92      	ldr	r3, [pc, #584]	; (8000ca4 <fsm_automatic_run+0x2d4>)
 8000a5a:	220a      	movs	r2, #10
 8000a5c:	601a      	str	r2, [r3, #0]
					  status_B=manual_init;
 8000a5e:	4b94      	ldr	r3, [pc, #592]	; (8000cb0 <fsm_automatic_run+0x2e0>)
 8000a60:	220a      	movs	r2, #10
 8000a62:	601a      	str	r2, [r3, #0]
				  break;
 8000a64:	e077      	b.n	8000b56 <fsm_automatic_run+0x186>
			  TurnOnYellow_A();
 8000a66:	f7ff ff45 	bl	80008f4 <TurnOnYellow_A>
					  if(isTimerExpired(0)==1){
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff ff12 	bl	8000894 <isTimerExpired>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d115      	bne.n	8000aa2 <fsm_automatic_run+0xd2>
					  status_A=RED;
 8000a76:	4b8b      	ldr	r3, [pc, #556]	; (8000ca4 <fsm_automatic_run+0x2d4>)
 8000a78:	2205      	movs	r2, #5
 8000a7a:	601a      	str	r2, [r3, #0]
					  setTimer(0, red*1000);
 8000a7c:	4b8d      	ldr	r3, [pc, #564]	; (8000cb4 <fsm_automatic_run+0x2e4>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a84:	fb02 f303 	mul.w	r3, r2, r3
 8000a88:	4619      	mov	r1, r3
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f7ff feb2 	bl	80007f4 <setTimer>
					  setTimer(3, 1000);
 8000a90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a94:	2003      	movs	r0, #3
 8000a96:	f7ff fead 	bl	80007f4 <setTimer>
					  counterA=red;
 8000a9a:	4b86      	ldr	r3, [pc, #536]	; (8000cb4 <fsm_automatic_run+0x2e4>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a83      	ldr	r2, [pc, #524]	; (8000cac <fsm_automatic_run+0x2dc>)
 8000aa0:	6013      	str	r3, [r2, #0]
				  if(isTimerExpired(3)==1){
 8000aa2:	2003      	movs	r0, #3
 8000aa4:	f7ff fef6 	bl	8000894 <isTimerExpired>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d109      	bne.n	8000ac2 <fsm_automatic_run+0xf2>
					  setTimer(3, 1000);
 8000aae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ab2:	2003      	movs	r0, #3
 8000ab4:	f7ff fe9e 	bl	80007f4 <setTimer>
					  counterA--;
 8000ab8:	4b7c      	ldr	r3, [pc, #496]	; (8000cac <fsm_automatic_run+0x2dc>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	4a7b      	ldr	r2, [pc, #492]	; (8000cac <fsm_automatic_run+0x2dc>)
 8000ac0:	6013      	str	r3, [r2, #0]
				  if(isButtonPressed(0)==1){
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f7ff fb42 	bl	800014c <isButtonPressed>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d145      	bne.n	8000b5a <fsm_automatic_run+0x18a>
					  status_A=manual_init;
 8000ace:	4b75      	ldr	r3, [pc, #468]	; (8000ca4 <fsm_automatic_run+0x2d4>)
 8000ad0:	220a      	movs	r2, #10
 8000ad2:	601a      	str	r2, [r3, #0]
					  status_B=manual_init;
 8000ad4:	4b76      	ldr	r3, [pc, #472]	; (8000cb0 <fsm_automatic_run+0x2e0>)
 8000ad6:	220a      	movs	r2, #10
 8000ad8:	601a      	str	r2, [r3, #0]
				  break;
 8000ada:	e03e      	b.n	8000b5a <fsm_automatic_run+0x18a>
			  TurnOnGreen_A();
 8000adc:	f7ff ff20 	bl	8000920 <TurnOnGreen_A>
				  if(isTimerExpired(0)==1){
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff fed7 	bl	8000894 <isTimerExpired>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d115      	bne.n	8000b18 <fsm_automatic_run+0x148>
					  status_A=YELLOW;
 8000aec:	4b6d      	ldr	r3, [pc, #436]	; (8000ca4 <fsm_automatic_run+0x2d4>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	601a      	str	r2, [r3, #0]
					  setTimer(0, yellow*1000);
 8000af2:	4b71      	ldr	r3, [pc, #452]	; (8000cb8 <fsm_automatic_run+0x2e8>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000afa:	fb02 f303 	mul.w	r3, r2, r3
 8000afe:	4619      	mov	r1, r3
 8000b00:	2000      	movs	r0, #0
 8000b02:	f7ff fe77 	bl	80007f4 <setTimer>
					  setTimer(3, 1000);
 8000b06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b0a:	2003      	movs	r0, #3
 8000b0c:	f7ff fe72 	bl	80007f4 <setTimer>
					  counterA=yellow;
 8000b10:	4b69      	ldr	r3, [pc, #420]	; (8000cb8 <fsm_automatic_run+0x2e8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a65      	ldr	r2, [pc, #404]	; (8000cac <fsm_automatic_run+0x2dc>)
 8000b16:	6013      	str	r3, [r2, #0]
				  if(isTimerExpired(3)==1){
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f7ff febb 	bl	8000894 <isTimerExpired>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d109      	bne.n	8000b38 <fsm_automatic_run+0x168>
				  setTimer(3, 1000);
 8000b24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f7ff fe63 	bl	80007f4 <setTimer>
				  counterA--;
 8000b2e:	4b5f      	ldr	r3, [pc, #380]	; (8000cac <fsm_automatic_run+0x2dc>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	4a5d      	ldr	r2, [pc, #372]	; (8000cac <fsm_automatic_run+0x2dc>)
 8000b36:	6013      	str	r3, [r2, #0]
				  if(isButtonPressed(0)==1){
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff fb07 	bl	800014c <isButtonPressed>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d10c      	bne.n	8000b5e <fsm_automatic_run+0x18e>
					  status_A=manual_init;
 8000b44:	4b57      	ldr	r3, [pc, #348]	; (8000ca4 <fsm_automatic_run+0x2d4>)
 8000b46:	220a      	movs	r2, #10
 8000b48:	601a      	str	r2, [r3, #0]
					  status_B=manual_init;
 8000b4a:	4b59      	ldr	r3, [pc, #356]	; (8000cb0 <fsm_automatic_run+0x2e0>)
 8000b4c:	220a      	movs	r2, #10
 8000b4e:	601a      	str	r2, [r3, #0]
				  break;
 8000b50:	e005      	b.n	8000b5e <fsm_automatic_run+0x18e>
				  break;
 8000b52:	bf00      	nop
 8000b54:	e004      	b.n	8000b60 <fsm_automatic_run+0x190>
				  break;
 8000b56:	bf00      	nop
 8000b58:	e002      	b.n	8000b60 <fsm_automatic_run+0x190>
				  break;
 8000b5a:	bf00      	nop
 8000b5c:	e000      	b.n	8000b60 <fsm_automatic_run+0x190>
				  break;
 8000b5e:	bf00      	nop
			  }
		switch(status_B){
 8000b60:	4b53      	ldr	r3, [pc, #332]	; (8000cb0 <fsm_automatic_run+0x2e0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b05      	cmp	r3, #5
 8000b66:	d036      	beq.n	8000bd6 <fsm_automatic_run+0x206>
 8000b68:	2b05      	cmp	r3, #5
 8000b6a:	f300 8092 	bgt.w	8000c92 <fsm_automatic_run+0x2c2>
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d060      	beq.n	8000c34 <fsm_automatic_run+0x264>
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	f040 808d 	bne.w	8000c92 <fsm_automatic_run+0x2c2>
			  case GREEN:
			  TurnOnGreen_B();
 8000b78:	f7ff fee8 	bl	800094c <TurnOnGreen_B>
				  if(isTimerExpired(1)==1){
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f7ff fe89 	bl	8000894 <isTimerExpired>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d115      	bne.n	8000bb4 <fsm_automatic_run+0x1e4>
					  status_B=YELLOW;
 8000b88:	4b49      	ldr	r3, [pc, #292]	; (8000cb0 <fsm_automatic_run+0x2e0>)
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	601a      	str	r2, [r3, #0]
					  setTimer(1, yellow*1000);
 8000b8e:	4b4a      	ldr	r3, [pc, #296]	; (8000cb8 <fsm_automatic_run+0x2e8>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b96:	fb02 f303 	mul.w	r3, r2, r3
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f7ff fe29 	bl	80007f4 <setTimer>
					  setTimer(4, 1000);
 8000ba2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ba6:	2004      	movs	r0, #4
 8000ba8:	f7ff fe24 	bl	80007f4 <setTimer>
					  counterB=yellow;
 8000bac:	4b42      	ldr	r3, [pc, #264]	; (8000cb8 <fsm_automatic_run+0x2e8>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a42      	ldr	r2, [pc, #264]	; (8000cbc <fsm_automatic_run+0x2ec>)
 8000bb2:	6013      	str	r3, [r2, #0]
				  }
				  if(isTimerExpired(4)==1){
 8000bb4:	2004      	movs	r0, #4
 8000bb6:	f7ff fe6d 	bl	8000894 <isTimerExpired>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d16a      	bne.n	8000c96 <fsm_automatic_run+0x2c6>
					  setTimer(4, 1000);
 8000bc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bc4:	2004      	movs	r0, #4
 8000bc6:	f7ff fe15 	bl	80007f4 <setTimer>
					  counterB--;
 8000bca:	4b3c      	ldr	r3, [pc, #240]	; (8000cbc <fsm_automatic_run+0x2ec>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	4a3a      	ldr	r2, [pc, #232]	; (8000cbc <fsm_automatic_run+0x2ec>)
 8000bd2:	6013      	str	r3, [r2, #0]
					  }
				 			  break;
 8000bd4:	e05f      	b.n	8000c96 <fsm_automatic_run+0x2c6>
			  case RED:
			  TurnOnRed_B();
 8000bd6:	f7ff fecf 	bl	8000978 <TurnOnRed_B>
				  if(isTimerExpired(1)==1){
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f7ff fe5a 	bl	8000894 <isTimerExpired>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d115      	bne.n	8000c12 <fsm_automatic_run+0x242>
					  status_B=GREEN;
 8000be6:	4b32      	ldr	r3, [pc, #200]	; (8000cb0 <fsm_automatic_run+0x2e0>)
 8000be8:	2203      	movs	r2, #3
 8000bea:	601a      	str	r2, [r3, #0]
					  setTimer(1, green*1000);
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <fsm_automatic_run+0x2d8>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bf4:	fb02 f303 	mul.w	r3, r2, r3
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f7ff fdfa 	bl	80007f4 <setTimer>
					  setTimer(4, 1000);
 8000c00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c04:	2004      	movs	r0, #4
 8000c06:	f7ff fdf5 	bl	80007f4 <setTimer>
					  counterB=green;
 8000c0a:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <fsm_automatic_run+0x2d8>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a2b      	ldr	r2, [pc, #172]	; (8000cbc <fsm_automatic_run+0x2ec>)
 8000c10:	6013      	str	r3, [r2, #0]
				  }
				  if(isTimerExpired(4)==1){
 8000c12:	2004      	movs	r0, #4
 8000c14:	f7ff fe3e 	bl	8000894 <isTimerExpired>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d13d      	bne.n	8000c9a <fsm_automatic_run+0x2ca>
					  setTimer(4, 1000);
 8000c1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c22:	2004      	movs	r0, #4
 8000c24:	f7ff fde6 	bl	80007f4 <setTimer>
					  counterB--;
 8000c28:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <fsm_automatic_run+0x2ec>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	4a23      	ldr	r2, [pc, #140]	; (8000cbc <fsm_automatic_run+0x2ec>)
 8000c30:	6013      	str	r3, [r2, #0]
					  }

			 		  break;
 8000c32:	e032      	b.n	8000c9a <fsm_automatic_run+0x2ca>
			  case YELLOW:
			  TurnOnYellow_B();
 8000c34:	f7ff feb6 	bl	80009a4 <TurnOnYellow_B>
				  if(isTimerExpired(1)==1){
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f7ff fe2b 	bl	8000894 <isTimerExpired>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d115      	bne.n	8000c70 <fsm_automatic_run+0x2a0>
					  status_B=RED;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <fsm_automatic_run+0x2e0>)
 8000c46:	2205      	movs	r2, #5
 8000c48:	601a      	str	r2, [r3, #0]
					  setTimer(1, red*1000);
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <fsm_automatic_run+0x2e4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c52:	fb02 f303 	mul.w	r3, r2, r3
 8000c56:	4619      	mov	r1, r3
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff fdcb 	bl	80007f4 <setTimer>
					  setTimer(4, 1000);
 8000c5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c62:	2004      	movs	r0, #4
 8000c64:	f7ff fdc6 	bl	80007f4 <setTimer>
					  counterB=red;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <fsm_automatic_run+0x2e4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a13      	ldr	r2, [pc, #76]	; (8000cbc <fsm_automatic_run+0x2ec>)
 8000c6e:	6013      	str	r3, [r2, #0]
				  }
				  if(isTimerExpired(4)){
 8000c70:	2004      	movs	r0, #4
 8000c72:	f7ff fe0f 	bl	8000894 <isTimerExpired>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d010      	beq.n	8000c9e <fsm_automatic_run+0x2ce>
					  setTimer(4, 1000);
 8000c7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c80:	2004      	movs	r0, #4
 8000c82:	f7ff fdb7 	bl	80007f4 <setTimer>
					  counterB--;
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <fsm_automatic_run+0x2ec>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <fsm_automatic_run+0x2ec>)
 8000c8e:	6013      	str	r3, [r2, #0]
					  }

	               break;
 8000c90:	e005      	b.n	8000c9e <fsm_automatic_run+0x2ce>
		  default:
			  break;
 8000c92:	bf00      	nop
 8000c94:	e004      	b.n	8000ca0 <fsm_automatic_run+0x2d0>
				 			  break;
 8000c96:	bf00      	nop
 8000c98:	e002      	b.n	8000ca0 <fsm_automatic_run+0x2d0>
			 		  break;
 8000c9a:	bf00      	nop
 8000c9c:	e000      	b.n	8000ca0 <fsm_automatic_run+0x2d0>
	               break;
 8000c9e:	bf00      	nop
			  }
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2000003c 	.word	0x2000003c
 8000ca8:	20000058 	.word	0x20000058
 8000cac:	20000034 	.word	0x20000034
 8000cb0:	20000040 	.word	0x20000040
 8000cb4:	20000054 	.word	0x20000054
 8000cb8:	2000005c 	.word	0x2000005c
 8000cbc:	20000038 	.word	0x20000038

08000cc0 <fsm_manual_run>:
 */


#include "fsm_manual.h"

void fsm_manual_run(){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	switch(status_A){
 8000cc4:	4b6d      	ldr	r3, [pc, #436]	; (8000e7c <fsm_manual_run+0x1bc>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3b0a      	subs	r3, #10
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	f200 8186 	bhi.w	8000fdc <fsm_manual_run+0x31c>
 8000cd0:	a201      	add	r2, pc, #4	; (adr r2, 8000cd8 <fsm_manual_run+0x18>)
 8000cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd6:	bf00      	nop
 8000cd8:	08000ce9 	.word	0x08000ce9
 8000cdc:	08000d35 	.word	0x08000d35
 8000ce0:	08000e9d 	.word	0x08000e9d
 8000ce4:	08000dd9 	.word	0x08000dd9
			case manual_init:
				HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2101      	movs	r1, #1
 8000cec:	4864      	ldr	r0, [pc, #400]	; (8000e80 <fsm_manual_run+0x1c0>)
 8000cee:	f000 fe74 	bl	80019da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	4862      	ldr	r0, [pc, #392]	; (8000e80 <fsm_manual_run+0x1c0>)
 8000cf8:	f000 fe6f 	bl	80019da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2104      	movs	r1, #4
 8000d00:	485f      	ldr	r0, [pc, #380]	; (8000e80 <fsm_manual_run+0x1c0>)
 8000d02:	f000 fe6a 	bl	80019da <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2108      	movs	r1, #8
 8000d0a:	485d      	ldr	r0, [pc, #372]	; (8000e80 <fsm_manual_run+0x1c0>)
 8000d0c:	f000 fe65 	bl	80019da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2110      	movs	r1, #16
 8000d14:	485a      	ldr	r0, [pc, #360]	; (8000e80 <fsm_manual_run+0x1c0>)
 8000d16:	f000 fe60 	bl	80019da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2120      	movs	r1, #32
 8000d1e:	4858      	ldr	r0, [pc, #352]	; (8000e80 <fsm_manual_run+0x1c0>)
 8000d20:	f000 fe5b 	bl	80019da <HAL_GPIO_WritePin>

				if (1)
				{
					status_A = manual_red;
 8000d24:	4b55      	ldr	r3, [pc, #340]	; (8000e7c <fsm_manual_run+0x1bc>)
 8000d26:	220b      	movs	r2, #11
 8000d28:	601a      	str	r2, [r3, #0]
					setTimer(5, 250);
 8000d2a:	21fa      	movs	r1, #250	; 0xfa
 8000d2c:	2005      	movs	r0, #5
 8000d2e:	f7ff fd61 	bl	80007f4 <setTimer>

				}
				break;
 8000d32:	e15a      	b.n	8000fea <fsm_manual_run+0x32a>
		    case manual_red:
				 counterA=1;
 8000d34:	4b53      	ldr	r3, [pc, #332]	; (8000e84 <fsm_manual_run+0x1c4>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	601a      	str	r2, [r3, #0]
				 counterB=man_red;
 8000d3a:	4b53      	ldr	r3, [pc, #332]	; (8000e88 <fsm_manual_run+0x1c8>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a53      	ldr	r2, [pc, #332]	; (8000e8c <fsm_manual_run+0x1cc>)
 8000d40:	6013      	str	r3, [r2, #0]
				 led7_run();
 8000d42:	f7ff fd05 	bl	8000750 <led7_run>
				if(isTimerExpired(5)==1){
 8000d46:	2005      	movs	r0, #5
 8000d48:	f7ff fda4 	bl	8000894 <isTimerExpired>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d11f      	bne.n	8000d92 <fsm_manual_run+0xd2>
				  setTimer(5, 250);
 8000d52:	21fa      	movs	r1, #250	; 0xfa
 8000d54:	2005      	movs	r0, #5
 8000d56:	f7ff fd4d 	bl	80007f4 <setTimer>

				  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	4848      	ldr	r0, [pc, #288]	; (8000e80 <fsm_manual_run+0x1c0>)
 8000d5e:	f000 fe54 	bl	8001a0a <HAL_GPIO_TogglePin>
				  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2102      	movs	r1, #2
 8000d66:	4846      	ldr	r0, [pc, #280]	; (8000e80 <fsm_manual_run+0x1c0>)
 8000d68:	f000 fe37 	bl	80019da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2104      	movs	r1, #4
 8000d70:	4843      	ldr	r0, [pc, #268]	; (8000e80 <fsm_manual_run+0x1c0>)
 8000d72:	f000 fe32 	bl	80019da <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2108      	movs	r1, #8
 8000d7a:	4841      	ldr	r0, [pc, #260]	; (8000e80 <fsm_manual_run+0x1c0>)
 8000d7c:	f000 fe2d 	bl	80019da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2110      	movs	r1, #16
 8000d84:	483e      	ldr	r0, [pc, #248]	; (8000e80 <fsm_manual_run+0x1c0>)
 8000d86:	f000 fe28 	bl	80019da <HAL_GPIO_WritePin>
				  HAL_GPIO_TogglePin(LED_6_GPIO_Port, LED_6_Pin);
 8000d8a:	2120      	movs	r1, #32
 8000d8c:	483c      	ldr	r0, [pc, #240]	; (8000e80 <fsm_manual_run+0x1c0>)
 8000d8e:	f000 fe3c 	bl	8001a0a <HAL_GPIO_TogglePin>

				}
				  if(isButtonPressed(0)==1){
 8000d92:	2000      	movs	r0, #0
 8000d94:	f7ff f9da 	bl	800014c <isButtonPressed>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d102      	bne.n	8000da4 <fsm_manual_run+0xe4>
					  status_A=manual_yellow;
 8000d9e:	4b37      	ldr	r3, [pc, #220]	; (8000e7c <fsm_manual_run+0x1bc>)
 8000da0:	220d      	movs	r2, #13
 8000da2:	601a      	str	r2, [r3, #0]
				  }
				if(isButtonPressed(1)==1){
 8000da4:	2001      	movs	r0, #1
 8000da6:	f7ff f9d1 	bl	800014c <isButtonPressed>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d104      	bne.n	8000dba <fsm_manual_run+0xfa>
					  man_red++;
 8000db0:	4b35      	ldr	r3, [pc, #212]	; (8000e88 <fsm_manual_run+0x1c8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	4a34      	ldr	r2, [pc, #208]	; (8000e88 <fsm_manual_run+0x1c8>)
 8000db8:	6013      	str	r3, [r2, #0]
				  }

				if(isButtonPressed(2)==1){
 8000dba:	2002      	movs	r0, #2
 8000dbc:	f7ff f9c6 	bl	800014c <isButtonPressed>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	f040 810c 	bne.w	8000fe0 <fsm_manual_run+0x320>
					  red=man_red;
 8000dc8:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <fsm_manual_run+0x1c8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a30      	ldr	r2, [pc, #192]	; (8000e90 <fsm_manual_run+0x1d0>)
 8000dce:	6013      	str	r3, [r2, #0]
					  man_red=0;
 8000dd0:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <fsm_manual_run+0x1c8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
				  }
					  break;
 8000dd6:	e103      	b.n	8000fe0 <fsm_manual_run+0x320>
			case manual_yellow:
				  counterA=2;
 8000dd8:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <fsm_manual_run+0x1c4>)
 8000dda:	2202      	movs	r2, #2
 8000ddc:	601a      	str	r2, [r3, #0]
				 counterB=man_yellow;
 8000dde:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <fsm_manual_run+0x1d4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a2a      	ldr	r2, [pc, #168]	; (8000e8c <fsm_manual_run+0x1cc>)
 8000de4:	6013      	str	r3, [r2, #0]
				 led7_run();
 8000de6:	f7ff fcb3 	bl	8000750 <led7_run>
				if(isTimerExpired(5)==1){
 8000dea:	2005      	movs	r0, #5
 8000dec:	f7ff fd52 	bl	8000894 <isTimerExpired>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d11f      	bne.n	8000e36 <fsm_manual_run+0x176>
				  setTimer(5, 250);
 8000df6:	21fa      	movs	r1, #250	; 0xfa
 8000df8:	2005      	movs	r0, #5
 8000dfa:	f7ff fcfb 	bl	80007f4 <setTimer>
				  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2101      	movs	r1, #1
 8000e02:	481f      	ldr	r0, [pc, #124]	; (8000e80 <fsm_manual_run+0x1c0>)
 8000e04:	f000 fde9 	bl	80019da <HAL_GPIO_WritePin>
				  HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000e08:	2102      	movs	r1, #2
 8000e0a:	481d      	ldr	r0, [pc, #116]	; (8000e80 <fsm_manual_run+0x1c0>)
 8000e0c:	f000 fdfd 	bl	8001a0a <HAL_GPIO_TogglePin>
				  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2104      	movs	r1, #4
 8000e14:	481a      	ldr	r0, [pc, #104]	; (8000e80 <fsm_manual_run+0x1c0>)
 8000e16:	f000 fde0 	bl	80019da <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2108      	movs	r1, #8
 8000e1e:	4818      	ldr	r0, [pc, #96]	; (8000e80 <fsm_manual_run+0x1c0>)
 8000e20:	f000 fddb 	bl	80019da <HAL_GPIO_WritePin>
				  HAL_GPIO_TogglePin(LED_5_GPIO_Port, LED_5_Pin);
 8000e24:	2110      	movs	r1, #16
 8000e26:	4816      	ldr	r0, [pc, #88]	; (8000e80 <fsm_manual_run+0x1c0>)
 8000e28:	f000 fdef 	bl	8001a0a <HAL_GPIO_TogglePin>
				  HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2120      	movs	r1, #32
 8000e30:	4813      	ldr	r0, [pc, #76]	; (8000e80 <fsm_manual_run+0x1c0>)
 8000e32:	f000 fdd2 	bl	80019da <HAL_GPIO_WritePin>
				}
				 if(isButtonPressed(0)==1){
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff f988 	bl	800014c <isButtonPressed>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d102      	bne.n	8000e48 <fsm_manual_run+0x188>
					  status_A=manual_green;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <fsm_manual_run+0x1bc>)
 8000e44:	220c      	movs	r2, #12
 8000e46:	601a      	str	r2, [r3, #0]
				  }
				  if(isButtonPressed(1)==1){
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f7ff f97f 	bl	800014c <isButtonPressed>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d104      	bne.n	8000e5e <fsm_manual_run+0x19e>
					  man_yellow++;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <fsm_manual_run+0x1d4>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <fsm_manual_run+0x1d4>)
 8000e5c:	6013      	str	r3, [r2, #0]
				  }
				  if(isButtonPressed(2)==1){
 8000e5e:	2002      	movs	r0, #2
 8000e60:	f7ff f974 	bl	800014c <isButtonPressed>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	f040 80bc 	bne.w	8000fe4 <fsm_manual_run+0x324>
					  yellow=man_yellow;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <fsm_manual_run+0x1d4>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <fsm_manual_run+0x1d8>)
 8000e72:	6013      	str	r3, [r2, #0]
					  man_yellow=0;
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <fsm_manual_run+0x1d4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
				  }


					  break;
 8000e7a:	e0b3      	b.n	8000fe4 <fsm_manual_run+0x324>
 8000e7c:	2000003c 	.word	0x2000003c
 8000e80:	40010c00 	.word	0x40010c00
 8000e84:	20000034 	.word	0x20000034
 8000e88:	20000098 	.word	0x20000098
 8000e8c:	20000038 	.word	0x20000038
 8000e90:	20000054 	.word	0x20000054
 8000e94:	200000a0 	.word	0x200000a0
 8000e98:	2000005c 	.word	0x2000005c
		   case manual_green:
				  counterA=3;
 8000e9c:	4b54      	ldr	r3, [pc, #336]	; (8000ff0 <fsm_manual_run+0x330>)
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	601a      	str	r2, [r3, #0]
				 counterB=man_green;
 8000ea2:	4b54      	ldr	r3, [pc, #336]	; (8000ff4 <fsm_manual_run+0x334>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a54      	ldr	r2, [pc, #336]	; (8000ff8 <fsm_manual_run+0x338>)
 8000ea8:	6013      	str	r3, [r2, #0]
				 led7_run();
 8000eaa:	f7ff fc51 	bl	8000750 <led7_run>
			 if(isTimerExpired(5)==1){
 8000eae:	2005      	movs	r0, #5
 8000eb0:	f7ff fcf0 	bl	8000894 <isTimerExpired>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d11f      	bne.n	8000efa <fsm_manual_run+0x23a>
				  setTimer(5, 250);
 8000eba:	21fa      	movs	r1, #250	; 0xfa
 8000ebc:	2005      	movs	r0, #5
 8000ebe:	f7ff fc99 	bl	80007f4 <setTimer>
				  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	484d      	ldr	r0, [pc, #308]	; (8000ffc <fsm_manual_run+0x33c>)
 8000ec8:	f000 fd87 	bl	80019da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2102      	movs	r1, #2
 8000ed0:	484a      	ldr	r0, [pc, #296]	; (8000ffc <fsm_manual_run+0x33c>)
 8000ed2:	f000 fd82 	bl	80019da <HAL_GPIO_WritePin>
				  HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	4848      	ldr	r0, [pc, #288]	; (8000ffc <fsm_manual_run+0x33c>)
 8000eda:	f000 fd96 	bl	8001a0a <HAL_GPIO_TogglePin>

				  HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 8000ede:	2108      	movs	r1, #8
 8000ee0:	4846      	ldr	r0, [pc, #280]	; (8000ffc <fsm_manual_run+0x33c>)
 8000ee2:	f000 fd92 	bl	8001a0a <HAL_GPIO_TogglePin>
				  HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2110      	movs	r1, #16
 8000eea:	4844      	ldr	r0, [pc, #272]	; (8000ffc <fsm_manual_run+0x33c>)
 8000eec:	f000 fd75 	bl	80019da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2120      	movs	r1, #32
 8000ef4:	4841      	ldr	r0, [pc, #260]	; (8000ffc <fsm_manual_run+0x33c>)
 8000ef6:	f000 fd70 	bl	80019da <HAL_GPIO_WritePin>
				 }
				  if(isButtonPressed(0)==1){
 8000efa:	2000      	movs	r0, #0
 8000efc:	f7ff f926 	bl	800014c <isButtonPressed>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d151      	bne.n	8000faa <fsm_manual_run+0x2ea>
					  if(red>(green+yellow)){
 8000f06:	4b3e      	ldr	r3, [pc, #248]	; (8001000 <fsm_manual_run+0x340>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4b3e      	ldr	r3, [pc, #248]	; (8001004 <fsm_manual_run+0x344>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	441a      	add	r2, r3
 8000f10:	4b3d      	ldr	r3, [pc, #244]	; (8001008 <fsm_manual_run+0x348>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	da0c      	bge.n	8000f32 <fsm_manual_run+0x272>
						green+=red-(green+yellow);
 8000f18:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <fsm_manual_run+0x348>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b38      	ldr	r3, [pc, #224]	; (8001000 <fsm_manual_run+0x340>)
 8000f1e:	6819      	ldr	r1, [r3, #0]
 8000f20:	4b38      	ldr	r3, [pc, #224]	; (8001004 <fsm_manual_run+0x344>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	440b      	add	r3, r1
 8000f26:	1ad2      	subs	r2, r2, r3
 8000f28:	4b35      	ldr	r3, [pc, #212]	; (8001000 <fsm_manual_run+0x340>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a34      	ldr	r2, [pc, #208]	; (8001000 <fsm_manual_run+0x340>)
 8000f30:	6013      	str	r3, [r2, #0]
					}

					if(red<(green+yellow)){
 8000f32:	4b33      	ldr	r3, [pc, #204]	; (8001000 <fsm_manual_run+0x340>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4b33      	ldr	r3, [pc, #204]	; (8001004 <fsm_manual_run+0x344>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	441a      	add	r2, r3
 8000f3c:	4b32      	ldr	r3, [pc, #200]	; (8001008 <fsm_manual_run+0x348>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dd06      	ble.n	8000f52 <fsm_manual_run+0x292>
						red+=(green+yellow)-red;
 8000f44:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <fsm_manual_run+0x340>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <fsm_manual_run+0x344>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a2e      	ldr	r2, [pc, #184]	; (8001008 <fsm_manual_run+0x348>)
 8000f50:	6013      	str	r3, [r2, #0]
					}
					  status_A=RED;
 8000f52:	4b2e      	ldr	r3, [pc, #184]	; (800100c <fsm_manual_run+0x34c>)
 8000f54:	2205      	movs	r2, #5
 8000f56:	601a      	str	r2, [r3, #0]
					  status_B=GREEN;
 8000f58:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <fsm_manual_run+0x350>)
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	601a      	str	r2, [r3, #0]
					  counterA = red;
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <fsm_manual_run+0x348>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a23      	ldr	r2, [pc, #140]	; (8000ff0 <fsm_manual_run+0x330>)
 8000f64:	6013      	str	r3, [r2, #0]
					  counterB = green;
 8000f66:	4b26      	ldr	r3, [pc, #152]	; (8001000 <fsm_manual_run+0x340>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a23      	ldr	r2, [pc, #140]	; (8000ff8 <fsm_manual_run+0x338>)
 8000f6c:	6013      	str	r3, [r2, #0]
					setTimer(0, red*1000);
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <fsm_manual_run+0x348>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f76:	fb02 f303 	mul.w	r3, r2, r3
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff fc39 	bl	80007f4 <setTimer>
					setTimer(1, green*1000);
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <fsm_manual_run+0x340>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f8a:	fb02 f303 	mul.w	r3, r2, r3
 8000f8e:	4619      	mov	r1, r3
 8000f90:	2001      	movs	r0, #1
 8000f92:	f7ff fc2f 	bl	80007f4 <setTimer>
					setTimer(3, 1000);
 8000f96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f9a:	2003      	movs	r0, #3
 8000f9c:	f7ff fc2a 	bl	80007f4 <setTimer>
					setTimer(4, 1000);
 8000fa0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fa4:	2004      	movs	r0, #4
 8000fa6:	f7ff fc25 	bl	80007f4 <setTimer>



				  }
				  if(isButtonPressed(1)==1){
 8000faa:	2001      	movs	r0, #1
 8000fac:	f7ff f8ce 	bl	800014c <isButtonPressed>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d104      	bne.n	8000fc0 <fsm_manual_run+0x300>
					  man_green++;
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <fsm_manual_run+0x334>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <fsm_manual_run+0x334>)
 8000fbe:	6013      	str	r3, [r2, #0]
				  }
				  if(isButtonPressed(2)==1){
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	f7ff f8c3 	bl	800014c <isButtonPressed>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d10d      	bne.n	8000fe8 <fsm_manual_run+0x328>
					  green=man_green;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <fsm_manual_run+0x334>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <fsm_manual_run+0x340>)
 8000fd2:	6013      	str	r3, [r2, #0]
					  man_green=0;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <fsm_manual_run+0x334>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
				  }

					  break;
 8000fda:	e005      	b.n	8000fe8 <fsm_manual_run+0x328>
				  default:
					  break;
 8000fdc:	bf00      	nop
 8000fde:	e004      	b.n	8000fea <fsm_manual_run+0x32a>
					  break;
 8000fe0:	bf00      	nop
 8000fe2:	e002      	b.n	8000fea <fsm_manual_run+0x32a>
					  break;
 8000fe4:	bf00      	nop
 8000fe6:	e000      	b.n	8000fea <fsm_manual_run+0x32a>
					  break;
 8000fe8:	bf00      	nop
				  }
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000034 	.word	0x20000034
 8000ff4:	2000009c 	.word	0x2000009c
 8000ff8:	20000038 	.word	0x20000038
 8000ffc:	40010c00 	.word	0x40010c00
 8001000:	20000058 	.word	0x20000058
 8001004:	2000005c 	.word	0x2000005c
 8001008:	20000054 	.word	0x20000054
 800100c:	2000003c 	.word	0x2000003c
 8001010:	20000040 	.word	0x20000040

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001018:	f000 f9de 	bl	80013d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101c:	f000 f82e 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001020:	f000 f8b4 	bl	800118c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001024:	f000 f866 	bl	80010f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001028:	4813      	ldr	r0, [pc, #76]	; (8001078 <main+0x64>)
 800102a:	f001 f933 	bl	8002294 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
setTimer(0, 5000);
 800102e:	f241 3188 	movw	r1, #5000	; 0x1388
 8001032:	2000      	movs	r0, #0
 8001034:	f7ff fbde 	bl	80007f4 <setTimer>
setTimer(1, 3000);
 8001038:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff fbd9 	bl	80007f4 <setTimer>
setTimer(2, 100);
 8001042:	2164      	movs	r1, #100	; 0x64
 8001044:	2002      	movs	r0, #2
 8001046:	f7ff fbd5 	bl	80007f4 <setTimer>
setTimer(3, 1000);
 800104a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800104e:	2003      	movs	r0, #3
 8001050:	f7ff fbd0 	bl	80007f4 <setTimer>
setTimer(4, 1000);
 8001054:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001058:	2004      	movs	r0, #4
 800105a:	f7ff fbcb 	bl	80007f4 <setTimer>
setTimer(5, 250);
 800105e:	21fa      	movs	r1, #250	; 0xfa
 8001060:	2005      	movs	r0, #5
 8001062:	f7ff fbc7 	bl	80007f4 <setTimer>
setTimer(6, 250);
 8001066:	21fa      	movs	r1, #250	; 0xfa
 8001068:	2006      	movs	r0, #6
 800106a:	f7ff fbc3 	bl	80007f4 <setTimer>
  while (1)
  {

    /* USER CODE END WHILE */
	  fsm_automatic_run();
 800106e:	f7ff fcaf 	bl	80009d0 <fsm_automatic_run>
	  fsm_manual_run();
 8001072:	f7ff fe25 	bl	8000cc0 <fsm_manual_run>
	  fsm_automatic_run();
 8001076:	e7fa      	b.n	800106e <main+0x5a>
 8001078:	200000f4 	.word	0x200000f4

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b090      	sub	sp, #64	; 0x40
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0318 	add.w	r3, r7, #24
 8001086:	2228      	movs	r2, #40	; 0x28
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f001 fcb2 	bl	80029f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800109e:	2302      	movs	r3, #2
 80010a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a2:	2301      	movs	r3, #1
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a6:	2310      	movs	r3, #16
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fcc2 	bl	8001a3c <HAL_RCC_OscConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010be:	f000 f8d1 	bl	8001264 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c2:	230f      	movs	r3, #15
 80010c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 ff2e 	bl	8001f3c <HAL_RCC_ClockConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010e6:	f000 f8bd 	bl	8001264 <Error_Handler>
  }
}
 80010ea:	bf00      	nop
 80010ec:	3740      	adds	r7, #64	; 0x40
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fa:	f107 0308 	add.w	r3, r7, #8
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001108:	463b      	mov	r3, r7
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <MX_TIM2_Init+0x94>)
 8001112:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001116:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001118:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <MX_TIM2_Init+0x94>)
 800111a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800111e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <MX_TIM2_Init+0x94>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <MX_TIM2_Init+0x94>)
 8001128:	2209      	movs	r2, #9
 800112a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <MX_TIM2_Init+0x94>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <MX_TIM2_Init+0x94>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001138:	4813      	ldr	r0, [pc, #76]	; (8001188 <MX_TIM2_Init+0x94>)
 800113a:	f001 f85b 	bl	80021f4 <HAL_TIM_Base_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001144:	f000 f88e 	bl	8001264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	4619      	mov	r1, r3
 8001154:	480c      	ldr	r0, [pc, #48]	; (8001188 <MX_TIM2_Init+0x94>)
 8001156:	f001 f9d9 	bl	800250c <HAL_TIM_ConfigClockSource>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001160:	f000 f880 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001164:	2300      	movs	r3, #0
 8001166:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_TIM2_Init+0x94>)
 8001172:	f001 fbb1 	bl	80028d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800117c:	f000 f872 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200000f4 	.word	0x200000f4

0800118c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <MX_GPIO_Init+0xb4>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a26      	ldr	r2, [pc, #152]	; (8001240 <MX_GPIO_Init+0xb4>)
 80011a6:	f043 0304 	orr.w	r3, r3, #4
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <MX_GPIO_Init+0xb4>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <MX_GPIO_Init+0xb4>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a20      	ldr	r2, [pc, #128]	; (8001240 <MX_GPIO_Init+0xb4>)
 80011be:	f043 0308 	orr.w	r3, r3, #8
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <MX_GPIO_Init+0xb4>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	211e      	movs	r1, #30
 80011d4:	481b      	ldr	r0, [pc, #108]	; (8001244 <MX_GPIO_Init+0xb8>)
 80011d6:	f000 fc00 	bl	80019da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|SEG4_Pin
 80011da:	2200      	movs	r2, #0
 80011dc:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80011e0:	4819      	ldr	r0, [pc, #100]	; (8001248 <MX_GPIO_Init+0xbc>)
 80011e2:	f000 fbfa 	bl	80019da <HAL_GPIO_WritePin>
                          |SEG5_Pin|SEG6_Pin|LED_4_Pin|LED_5_Pin
                          |LED_6_Pin|SEG0_Pin|SEG1_Pin|SEG2_Pin
                          |SEG3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin EN4_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin;
 80011e6:	231e      	movs	r3, #30
 80011e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2302      	movs	r3, #2
 80011f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	4619      	mov	r1, r3
 80011fc:	4811      	ldr	r0, [pc, #68]	; (8001244 <MX_GPIO_Init+0xb8>)
 80011fe:	f000 fa5b 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8001202:	23e0      	movs	r3, #224	; 0xe0
 8001204:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800120a:	2301      	movs	r3, #1
 800120c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 0308 	add.w	r3, r7, #8
 8001212:	4619      	mov	r1, r3
 8001214:	480b      	ldr	r0, [pc, #44]	; (8001244 <MX_GPIO_Init+0xb8>)
 8001216:	f000 fa4f 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin SEG4_Pin
                           SEG5_Pin SEG6_Pin LED_4_Pin LED_5_Pin
                           LED_6_Pin SEG0_Pin SEG1_Pin SEG2_Pin
                           SEG3_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|SEG4_Pin
 800121a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800121e:	60bb      	str	r3, [r7, #8]
                          |SEG5_Pin|SEG6_Pin|LED_4_Pin|LED_5_Pin
                          |LED_6_Pin|SEG0_Pin|SEG1_Pin|SEG2_Pin
                          |SEG3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2302      	movs	r3, #2
 800122a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 0308 	add.w	r3, r7, #8
 8001230:	4619      	mov	r1, r3
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_GPIO_Init+0xbc>)
 8001234:	f000 fa40 	bl	80016b8 <HAL_GPIO_Init>

}
 8001238:	bf00      	nop
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40021000 	.word	0x40021000
 8001244:	40010800 	.word	0x40010800
 8001248:	40010c00 	.word	0x40010c00

0800124c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	timeRun();
 8001254:	f7ff faee 	bl	8000834 <timeRun>
	getKeyInput();
 8001258:	f7fe ff92 	bl	8000180 <getKeyInput>

}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
}
 800126a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800126c:	e7fe      	b.n	800126c <Error_Handler+0x8>
	...

08001270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_MspInit+0x5c>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	4a14      	ldr	r2, [pc, #80]	; (80012cc <HAL_MspInit+0x5c>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6193      	str	r3, [r2, #24]
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_MspInit+0x5c>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_MspInit+0x5c>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <HAL_MspInit+0x5c>)
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001298:	61d3      	str	r3, [r2, #28]
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <HAL_MspInit+0x5c>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_MspInit+0x60>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <HAL_MspInit+0x60>)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010000 	.word	0x40010000

080012d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e4:	d113      	bne.n	800130e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <HAL_TIM_Base_MspInit+0x44>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <HAL_TIM_Base_MspInit+0x44>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	61d3      	str	r3, [r2, #28]
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_TIM_Base_MspInit+0x44>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	201c      	movs	r0, #28
 8001304:	f000 f9a1 	bl	800164a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001308:	201c      	movs	r0, #28
 800130a:	f000 f9ba 	bl	8001682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <NMI_Handler+0x4>

08001322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <MemManage_Handler+0x4>

0800132e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <BusFault_Handler+0x4>

08001334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <UsageFault_Handler+0x4>

0800133a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr

08001346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr

08001352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr

0800135e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001362:	f000 f87f 	bl	8001464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <TIM2_IRQHandler+0x10>)
 8001372:	f000 ffdb 	bl	800232c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200000f4 	.word	0x200000f4

08001380 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800138c:	f7ff fff8 	bl	8001380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001390:	480b      	ldr	r0, [pc, #44]	; (80013c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001392:	490c      	ldr	r1, [pc, #48]	; (80013c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001398:	e002      	b.n	80013a0 <LoopCopyDataInit>

0800139a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800139c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139e:	3304      	adds	r3, #4

080013a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a4:	d3f9      	bcc.n	800139a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a6:	4a09      	ldr	r2, [pc, #36]	; (80013cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013a8:	4c09      	ldr	r4, [pc, #36]	; (80013d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ac:	e001      	b.n	80013b2 <LoopFillZerobss>

080013ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b0:	3204      	adds	r2, #4

080013b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b4:	d3fb      	bcc.n	80013ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013b6:	f001 faf9 	bl	80029ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ba:	f7ff fe2b 	bl	8001014 <main>
  bx lr
 80013be:	4770      	bx	lr
  ldr r0, =_sdata
 80013c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80013c8:	08002a48 	.word	0x08002a48
  ldr r2, =_sbss
 80013cc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80013d0:	20000140 	.word	0x20000140

080013d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC1_2_IRQHandler>
	...

080013d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_Init+0x28>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <HAL_Init+0x28>)
 80013e2:	f043 0310 	orr.w	r3, r3, #16
 80013e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e8:	2003      	movs	r0, #3
 80013ea:	f000 f923 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ee:	200f      	movs	r0, #15
 80013f0:	f000 f808 	bl	8001404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f4:	f7ff ff3c 	bl	8001270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40022000 	.word	0x40022000

08001404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_InitTick+0x54>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_InitTick+0x58>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141a:	fbb3 f3f1 	udiv	r3, r3, r1
 800141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f93b 	bl	800169e <HAL_SYSTICK_Config>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e00e      	b.n	8001450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b0f      	cmp	r3, #15
 8001436:	d80a      	bhi.n	800144e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001438:	2200      	movs	r2, #0
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f000 f903 	bl	800164a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001444:	4a06      	ldr	r2, [pc, #24]	; (8001460 <HAL_InitTick+0x5c>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	e000      	b.n	8001450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000060 	.word	0x20000060
 800145c:	20000068 	.word	0x20000068
 8001460:	20000064 	.word	0x20000064

08001464 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_IncTick+0x1c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_IncTick+0x20>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4413      	add	r3, r2
 8001474:	4a03      	ldr	r2, [pc, #12]	; (8001484 <HAL_IncTick+0x20>)
 8001476:	6013      	str	r3, [r2, #0]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	20000068 	.word	0x20000068
 8001484:	2000013c 	.word	0x2000013c

08001488 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b02      	ldr	r3, [pc, #8]	; (8001498 <HAL_GetTick+0x10>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	2000013c 	.word	0x2000013c

0800149c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b8:	4013      	ands	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ce:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	60d3      	str	r3, [r2, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <__NVIC_GetPriorityGrouping+0x18>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	f003 0307 	and.w	r3, r3, #7
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db0b      	blt.n	800152a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f003 021f 	and.w	r2, r3, #31
 8001518:	4906      	ldr	r1, [pc, #24]	; (8001534 <__NVIC_EnableIRQ+0x34>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	2001      	movs	r0, #1
 8001522:	fa00 f202 	lsl.w	r2, r0, r2
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	e000e100 	.word	0xe000e100

08001538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	db0a      	blt.n	8001562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	490c      	ldr	r1, [pc, #48]	; (8001584 <__NVIC_SetPriority+0x4c>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	0112      	lsls	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	440b      	add	r3, r1
 800155c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001560:	e00a      	b.n	8001578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4908      	ldr	r1, [pc, #32]	; (8001588 <__NVIC_SetPriority+0x50>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	3b04      	subs	r3, #4
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	440b      	add	r3, r1
 8001576:	761a      	strb	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f1c3 0307 	rsb	r3, r3, #7
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	bf28      	it	cs
 80015aa:	2304      	movcs	r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3304      	adds	r3, #4
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d902      	bls.n	80015bc <NVIC_EncodePriority+0x30>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3b03      	subs	r3, #3
 80015ba:	e000      	b.n	80015be <NVIC_EncodePriority+0x32>
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43d9      	mvns	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	4313      	orrs	r3, r2
         );
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001600:	d301      	bcc.n	8001606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001602:	2301      	movs	r3, #1
 8001604:	e00f      	b.n	8001626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <SysTick_Config+0x40>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160e:	210f      	movs	r1, #15
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f7ff ff90 	bl	8001538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <SysTick_Config+0x40>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <SysTick_Config+0x40>)
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	e000e010 	.word	0xe000e010

08001634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff2d 	bl	800149c <__NVIC_SetPriorityGrouping>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800165c:	f7ff ff42 	bl	80014e4 <__NVIC_GetPriorityGrouping>
 8001660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f7ff ff90 	bl	800158c <NVIC_EncodePriority>
 800166c:	4602      	mov	r2, r0
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff5f 	bl	8001538 <__NVIC_SetPriority>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff35 	bl	8001500 <__NVIC_EnableIRQ>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ffa2 	bl	80015f0 <SysTick_Config>
 80016ac:	4603      	mov	r3, r0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b08b      	sub	sp, #44	; 0x2c
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ca:	e148      	b.n	800195e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016cc:	2201      	movs	r2, #1
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	69fa      	ldr	r2, [r7, #28]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	f040 8137 	bne.w	8001958 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4aa3      	ldr	r2, [pc, #652]	; (800197c <HAL_GPIO_Init+0x2c4>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d05e      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 80016f4:	4aa1      	ldr	r2, [pc, #644]	; (800197c <HAL_GPIO_Init+0x2c4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d875      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 80016fa:	4aa1      	ldr	r2, [pc, #644]	; (8001980 <HAL_GPIO_Init+0x2c8>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d058      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 8001700:	4a9f      	ldr	r2, [pc, #636]	; (8001980 <HAL_GPIO_Init+0x2c8>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d86f      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 8001706:	4a9f      	ldr	r2, [pc, #636]	; (8001984 <HAL_GPIO_Init+0x2cc>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d052      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 800170c:	4a9d      	ldr	r2, [pc, #628]	; (8001984 <HAL_GPIO_Init+0x2cc>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d869      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 8001712:	4a9d      	ldr	r2, [pc, #628]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d04c      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 8001718:	4a9b      	ldr	r2, [pc, #620]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d863      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 800171e:	4a9b      	ldr	r2, [pc, #620]	; (800198c <HAL_GPIO_Init+0x2d4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d046      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 8001724:	4a99      	ldr	r2, [pc, #612]	; (800198c <HAL_GPIO_Init+0x2d4>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d85d      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 800172a:	2b12      	cmp	r3, #18
 800172c:	d82a      	bhi.n	8001784 <HAL_GPIO_Init+0xcc>
 800172e:	2b12      	cmp	r3, #18
 8001730:	d859      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 8001732:	a201      	add	r2, pc, #4	; (adr r2, 8001738 <HAL_GPIO_Init+0x80>)
 8001734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001738:	080017b3 	.word	0x080017b3
 800173c:	0800178d 	.word	0x0800178d
 8001740:	0800179f 	.word	0x0800179f
 8001744:	080017e1 	.word	0x080017e1
 8001748:	080017e7 	.word	0x080017e7
 800174c:	080017e7 	.word	0x080017e7
 8001750:	080017e7 	.word	0x080017e7
 8001754:	080017e7 	.word	0x080017e7
 8001758:	080017e7 	.word	0x080017e7
 800175c:	080017e7 	.word	0x080017e7
 8001760:	080017e7 	.word	0x080017e7
 8001764:	080017e7 	.word	0x080017e7
 8001768:	080017e7 	.word	0x080017e7
 800176c:	080017e7 	.word	0x080017e7
 8001770:	080017e7 	.word	0x080017e7
 8001774:	080017e7 	.word	0x080017e7
 8001778:	080017e7 	.word	0x080017e7
 800177c:	08001795 	.word	0x08001795
 8001780:	080017a9 	.word	0x080017a9
 8001784:	4a82      	ldr	r2, [pc, #520]	; (8001990 <HAL_GPIO_Init+0x2d8>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d013      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800178a:	e02c      	b.n	80017e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	623b      	str	r3, [r7, #32]
          break;
 8001792:	e029      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	3304      	adds	r3, #4
 800179a:	623b      	str	r3, [r7, #32]
          break;
 800179c:	e024      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	3308      	adds	r3, #8
 80017a4:	623b      	str	r3, [r7, #32]
          break;
 80017a6:	e01f      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	330c      	adds	r3, #12
 80017ae:	623b      	str	r3, [r7, #32]
          break;
 80017b0:	e01a      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ba:	2304      	movs	r3, #4
 80017bc:	623b      	str	r3, [r7, #32]
          break;
 80017be:	e013      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c8:	2308      	movs	r3, #8
 80017ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	611a      	str	r2, [r3, #16]
          break;
 80017d2:	e009      	b.n	80017e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d4:	2308      	movs	r3, #8
 80017d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	615a      	str	r2, [r3, #20]
          break;
 80017de:	e003      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
          break;
 80017e4:	e000      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          break;
 80017e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2bff      	cmp	r3, #255	; 0xff
 80017ec:	d801      	bhi.n	80017f2 <HAL_GPIO_Init+0x13a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	e001      	b.n	80017f6 <HAL_GPIO_Init+0x13e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3304      	adds	r3, #4
 80017f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	2bff      	cmp	r3, #255	; 0xff
 80017fc:	d802      	bhi.n	8001804 <HAL_GPIO_Init+0x14c>
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	e002      	b.n	800180a <HAL_GPIO_Init+0x152>
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	3b08      	subs	r3, #8
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	210f      	movs	r1, #15
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	fa01 f303 	lsl.w	r3, r1, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	401a      	ands	r2, r3
 800181c:	6a39      	ldr	r1, [r7, #32]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	431a      	orrs	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8090 	beq.w	8001958 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001838:	4b56      	ldr	r3, [pc, #344]	; (8001994 <HAL_GPIO_Init+0x2dc>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a55      	ldr	r2, [pc, #340]	; (8001994 <HAL_GPIO_Init+0x2dc>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b53      	ldr	r3, [pc, #332]	; (8001994 <HAL_GPIO_Init+0x2dc>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001850:	4a51      	ldr	r2, [pc, #324]	; (8001998 <HAL_GPIO_Init+0x2e0>)
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	220f      	movs	r2, #15
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4013      	ands	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a49      	ldr	r2, [pc, #292]	; (800199c <HAL_GPIO_Init+0x2e4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d00d      	beq.n	8001898 <HAL_GPIO_Init+0x1e0>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a48      	ldr	r2, [pc, #288]	; (80019a0 <HAL_GPIO_Init+0x2e8>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d007      	beq.n	8001894 <HAL_GPIO_Init+0x1dc>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a47      	ldr	r2, [pc, #284]	; (80019a4 <HAL_GPIO_Init+0x2ec>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d101      	bne.n	8001890 <HAL_GPIO_Init+0x1d8>
 800188c:	2302      	movs	r3, #2
 800188e:	e004      	b.n	800189a <HAL_GPIO_Init+0x1e2>
 8001890:	2303      	movs	r3, #3
 8001892:	e002      	b.n	800189a <HAL_GPIO_Init+0x1e2>
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <HAL_GPIO_Init+0x1e2>
 8001898:	2300      	movs	r3, #0
 800189a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800189c:	f002 0203 	and.w	r2, r2, #3
 80018a0:	0092      	lsls	r2, r2, #2
 80018a2:	4093      	lsls	r3, r2
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018aa:	493b      	ldr	r1, [pc, #236]	; (8001998 <HAL_GPIO_Init+0x2e0>)
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	3302      	adds	r3, #2
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d006      	beq.n	80018d2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018c4:	4b38      	ldr	r3, [pc, #224]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	4937      	ldr	r1, [pc, #220]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	608b      	str	r3, [r1, #8]
 80018d0:	e006      	b.n	80018e0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018d2:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	43db      	mvns	r3, r3
 80018da:	4933      	ldr	r1, [pc, #204]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 80018dc:	4013      	ands	r3, r2
 80018de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018ec:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	492d      	ldr	r1, [pc, #180]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	60cb      	str	r3, [r1, #12]
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018fa:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	43db      	mvns	r3, r3
 8001902:	4929      	ldr	r1, [pc, #164]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 8001904:	4013      	ands	r3, r2
 8001906:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001914:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	4923      	ldr	r1, [pc, #140]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001922:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	43db      	mvns	r3, r3
 800192a:	491f      	ldr	r1, [pc, #124]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 800192c:	4013      	ands	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d006      	beq.n	800194a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4919      	ldr	r1, [pc, #100]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	600b      	str	r3, [r1, #0]
 8001948:	e006      	b.n	8001958 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	43db      	mvns	r3, r3
 8001952:	4915      	ldr	r1, [pc, #84]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 8001954:	4013      	ands	r3, r2
 8001956:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	3301      	adds	r3, #1
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	f47f aeaf 	bne.w	80016cc <HAL_GPIO_Init+0x14>
  }
}
 800196e:	bf00      	nop
 8001970:	bf00      	nop
 8001972:	372c      	adds	r7, #44	; 0x2c
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	10320000 	.word	0x10320000
 8001980:	10310000 	.word	0x10310000
 8001984:	10220000 	.word	0x10220000
 8001988:	10210000 	.word	0x10210000
 800198c:	10120000 	.word	0x10120000
 8001990:	10110000 	.word	0x10110000
 8001994:	40021000 	.word	0x40021000
 8001998:	40010000 	.word	0x40010000
 800199c:	40010800 	.word	0x40010800
 80019a0:	40010c00 	.word	0x40010c00
 80019a4:	40011000 	.word	0x40011000
 80019a8:	40010400 	.word	0x40010400

080019ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	887b      	ldrh	r3, [r7, #2]
 80019be:	4013      	ands	r3, r2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
 80019c8:	e001      	b.n	80019ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	460b      	mov	r3, r1
 80019e4:	807b      	strh	r3, [r7, #2]
 80019e6:	4613      	mov	r3, r2
 80019e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019ea:	787b      	ldrb	r3, [r7, #1]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f0:	887a      	ldrh	r2, [r7, #2]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019f6:	e003      	b.n	8001a00 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	041a      	lsls	r2, r3, #16
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	611a      	str	r2, [r3, #16]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b085      	sub	sp, #20
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	460b      	mov	r3, r1
 8001a14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a1c:	887a      	ldrh	r2, [r7, #2]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4013      	ands	r3, r2
 8001a22:	041a      	lsls	r2, r3, #16
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	887b      	ldrh	r3, [r7, #2]
 8001a2a:	400b      	ands	r3, r1
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	611a      	str	r2, [r3, #16]
}
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e26c      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 8087 	beq.w	8001b6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a5c:	4b92      	ldr	r3, [pc, #584]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d00c      	beq.n	8001a82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a68:	4b8f      	ldr	r3, [pc, #572]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d112      	bne.n	8001a9a <HAL_RCC_OscConfig+0x5e>
 8001a74:	4b8c      	ldr	r3, [pc, #560]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a80:	d10b      	bne.n	8001a9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a82:	4b89      	ldr	r3, [pc, #548]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d06c      	beq.n	8001b68 <HAL_RCC_OscConfig+0x12c>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d168      	bne.n	8001b68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e246      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x76>
 8001aa4:	4b80      	ldr	r3, [pc, #512]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a7f      	ldr	r2, [pc, #508]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	e02e      	b.n	8001b10 <HAL_RCC_OscConfig+0xd4>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x98>
 8001aba:	4b7b      	ldr	r3, [pc, #492]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a7a      	ldr	r2, [pc, #488]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b78      	ldr	r3, [pc, #480]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a77      	ldr	r2, [pc, #476]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e01d      	b.n	8001b10 <HAL_RCC_OscConfig+0xd4>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0xbc>
 8001ade:	4b72      	ldr	r3, [pc, #456]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a71      	ldr	r2, [pc, #452]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b6f      	ldr	r3, [pc, #444]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a6e      	ldr	r2, [pc, #440]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e00b      	b.n	8001b10 <HAL_RCC_OscConfig+0xd4>
 8001af8:	4b6b      	ldr	r3, [pc, #428]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a6a      	ldr	r2, [pc, #424]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b68      	ldr	r3, [pc, #416]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a67      	ldr	r2, [pc, #412]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d013      	beq.n	8001b40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b18:	f7ff fcb6 	bl	8001488 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff fcb2 	bl	8001488 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	; 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e1fa      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	4b5d      	ldr	r3, [pc, #372]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0xe4>
 8001b3e:	e014      	b.n	8001b6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fca2 	bl	8001488 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff fc9e 	bl	8001488 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e1e6      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5a:	4b53      	ldr	r3, [pc, #332]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x10c>
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d063      	beq.n	8001c3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b76:	4b4c      	ldr	r3, [pc, #304]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00b      	beq.n	8001b9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b82:	4b49      	ldr	r3, [pc, #292]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d11c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x18c>
 8001b8e:	4b46      	ldr	r3, [pc, #280]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d116      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9a:	4b43      	ldr	r3, [pc, #268]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d005      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x176>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d001      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e1ba      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb2:	4b3d      	ldr	r3, [pc, #244]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4939      	ldr	r1, [pc, #228]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc6:	e03a      	b.n	8001c3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d020      	beq.n	8001c12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd0:	4b36      	ldr	r3, [pc, #216]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd6:	f7ff fc57 	bl	8001488 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bde:	f7ff fc53 	bl	8001488 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e19b      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf0:	4b2d      	ldr	r3, [pc, #180]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4927      	ldr	r1, [pc, #156]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	600b      	str	r3, [r1, #0]
 8001c10:	e015      	b.n	8001c3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c12:	4b26      	ldr	r3, [pc, #152]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7ff fc36 	bl	8001488 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c20:	f7ff fc32 	bl	8001488 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e17a      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c32:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d03a      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d019      	beq.n	8001c86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <HAL_RCC_OscConfig+0x274>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c58:	f7ff fc16 	bl	8001488 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c60:	f7ff fc12 	bl	8001488 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e15a      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c7e:	2001      	movs	r0, #1
 8001c80:	f000 fa9a 	bl	80021b8 <RCC_Delay>
 8001c84:	e01c      	b.n	8001cc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_RCC_OscConfig+0x274>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8c:	f7ff fbfc 	bl	8001488 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c92:	e00f      	b.n	8001cb4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c94:	f7ff fbf8 	bl	8001488 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d908      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e140      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	42420000 	.word	0x42420000
 8001cb0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb4:	4b9e      	ldr	r3, [pc, #632]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1e9      	bne.n	8001c94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 80a6 	beq.w	8001e1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd2:	4b97      	ldr	r3, [pc, #604]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10d      	bne.n	8001cfa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	4b94      	ldr	r3, [pc, #592]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4a93      	ldr	r2, [pc, #588]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	61d3      	str	r3, [r2, #28]
 8001cea:	4b91      	ldr	r3, [pc, #580]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfa:	4b8e      	ldr	r3, [pc, #568]	; (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d118      	bne.n	8001d38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d06:	4b8b      	ldr	r3, [pc, #556]	; (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a8a      	ldr	r2, [pc, #552]	; (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d12:	f7ff fbb9 	bl	8001488 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d1a:	f7ff fbb5 	bl	8001488 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b64      	cmp	r3, #100	; 0x64
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e0fd      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2c:	4b81      	ldr	r3, [pc, #516]	; (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d106      	bne.n	8001d4e <HAL_RCC_OscConfig+0x312>
 8001d40:	4b7b      	ldr	r3, [pc, #492]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	4a7a      	ldr	r2, [pc, #488]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6213      	str	r3, [r2, #32]
 8001d4c:	e02d      	b.n	8001daa <HAL_RCC_OscConfig+0x36e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x334>
 8001d56:	4b76      	ldr	r3, [pc, #472]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	4a75      	ldr	r2, [pc, #468]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	6213      	str	r3, [r2, #32]
 8001d62:	4b73      	ldr	r3, [pc, #460]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4a72      	ldr	r2, [pc, #456]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	f023 0304 	bic.w	r3, r3, #4
 8001d6c:	6213      	str	r3, [r2, #32]
 8001d6e:	e01c      	b.n	8001daa <HAL_RCC_OscConfig+0x36e>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2b05      	cmp	r3, #5
 8001d76:	d10c      	bne.n	8001d92 <HAL_RCC_OscConfig+0x356>
 8001d78:	4b6d      	ldr	r3, [pc, #436]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	4a6c      	ldr	r2, [pc, #432]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	6213      	str	r3, [r2, #32]
 8001d84:	4b6a      	ldr	r3, [pc, #424]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4a69      	ldr	r2, [pc, #420]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6213      	str	r3, [r2, #32]
 8001d90:	e00b      	b.n	8001daa <HAL_RCC_OscConfig+0x36e>
 8001d92:	4b67      	ldr	r3, [pc, #412]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4a66      	ldr	r2, [pc, #408]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	6213      	str	r3, [r2, #32]
 8001d9e:	4b64      	ldr	r3, [pc, #400]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	4a63      	ldr	r2, [pc, #396]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	f023 0304 	bic.w	r3, r3, #4
 8001da8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d015      	beq.n	8001dde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db2:	f7ff fb69 	bl	8001488 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db8:	e00a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dba:	f7ff fb65 	bl	8001488 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e0ab      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd0:	4b57      	ldr	r3, [pc, #348]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0ee      	beq.n	8001dba <HAL_RCC_OscConfig+0x37e>
 8001ddc:	e014      	b.n	8001e08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dde:	f7ff fb53 	bl	8001488 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7ff fb4f 	bl	8001488 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e095      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfc:	4b4c      	ldr	r3, [pc, #304]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1ee      	bne.n	8001de6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d105      	bne.n	8001e1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0e:	4b48      	ldr	r3, [pc, #288]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	4a47      	ldr	r2, [pc, #284]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 8081 	beq.w	8001f26 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e24:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d061      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d146      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e38:	4b3f      	ldr	r3, [pc, #252]	; (8001f38 <HAL_RCC_OscConfig+0x4fc>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3e:	f7ff fb23 	bl	8001488 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e46:	f7ff fb1f 	bl	8001488 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e067      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e58:	4b35      	ldr	r3, [pc, #212]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f0      	bne.n	8001e46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6c:	d108      	bne.n	8001e80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e6e:	4b30      	ldr	r3, [pc, #192]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	492d      	ldr	r1, [pc, #180]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e80:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a19      	ldr	r1, [r3, #32]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	430b      	orrs	r3, r1
 8001e92:	4927      	ldr	r1, [pc, #156]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e98:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <HAL_RCC_OscConfig+0x4fc>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9e:	f7ff faf3 	bl	8001488 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea6:	f7ff faef 	bl	8001488 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e037      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x46a>
 8001ec4:	e02f      	b.n	8001f26 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <HAL_RCC_OscConfig+0x4fc>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7ff fadc 	bl	8001488 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed4:	f7ff fad8 	bl	8001488 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e020      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x498>
 8001ef2:	e018      	b.n	8001f26 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e013      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d106      	bne.n	8001f22 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d001      	beq.n	8001f26 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40007000 	.word	0x40007000
 8001f38:	42420060 	.word	0x42420060

08001f3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0d0      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f50:	4b6a      	ldr	r3, [pc, #424]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d910      	bls.n	8001f80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b67      	ldr	r3, [pc, #412]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 0207 	bic.w	r2, r3, #7
 8001f66:	4965      	ldr	r1, [pc, #404]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b63      	ldr	r3, [pc, #396]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0b8      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d020      	beq.n	8001fce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f98:	4b59      	ldr	r3, [pc, #356]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	4a58      	ldr	r2, [pc, #352]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fa2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb0:	4b53      	ldr	r3, [pc, #332]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	4a52      	ldr	r2, [pc, #328]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fbc:	4b50      	ldr	r3, [pc, #320]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	494d      	ldr	r1, [pc, #308]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d040      	beq.n	800205c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d107      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe2:	4b47      	ldr	r3, [pc, #284]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d115      	bne.n	800201a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e07f      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d107      	bne.n	800200a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffa:	4b41      	ldr	r3, [pc, #260]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e073      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200a:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e06b      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800201a:	4b39      	ldr	r3, [pc, #228]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f023 0203 	bic.w	r2, r3, #3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4936      	ldr	r1, [pc, #216]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800202c:	f7ff fa2c 	bl	8001488 <HAL_GetTick>
 8002030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002032:	e00a      	b.n	800204a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002034:	f7ff fa28 	bl	8001488 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e053      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 020c 	and.w	r2, r3, #12
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	429a      	cmp	r2, r3
 800205a:	d1eb      	bne.n	8002034 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800205c:	4b27      	ldr	r3, [pc, #156]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d210      	bcs.n	800208c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b24      	ldr	r3, [pc, #144]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 0207 	bic.w	r2, r3, #7
 8002072:	4922      	ldr	r1, [pc, #136]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e032      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002098:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4916      	ldr	r1, [pc, #88]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d009      	beq.n	80020ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	490e      	ldr	r1, [pc, #56]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ca:	f000 f821 	bl	8002110 <HAL_RCC_GetSysClockFreq>
 80020ce:	4602      	mov	r2, r0
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	490a      	ldr	r1, [pc, #40]	; (8002104 <HAL_RCC_ClockConfig+0x1c8>)
 80020dc:	5ccb      	ldrb	r3, [r1, r3]
 80020de:	fa22 f303 	lsr.w	r3, r2, r3
 80020e2:	4a09      	ldr	r2, [pc, #36]	; (8002108 <HAL_RCC_ClockConfig+0x1cc>)
 80020e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_RCC_ClockConfig+0x1d0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff f98a 	bl	8001404 <HAL_InitTick>

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40022000 	.word	0x40022000
 8002100:	40021000 	.word	0x40021000
 8002104:	08002a1c 	.word	0x08002a1c
 8002108:	20000060 	.word	0x20000060
 800210c:	20000064 	.word	0x20000064

08002110 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	2300      	movs	r3, #0
 8002124:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800212a:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b04      	cmp	r3, #4
 8002138:	d002      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0x30>
 800213a:	2b08      	cmp	r3, #8
 800213c:	d003      	beq.n	8002146 <HAL_RCC_GetSysClockFreq+0x36>
 800213e:	e027      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002142:	613b      	str	r3, [r7, #16]
      break;
 8002144:	e027      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	0c9b      	lsrs	r3, r3, #18
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	4a17      	ldr	r2, [pc, #92]	; (80021ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002150:	5cd3      	ldrb	r3, [r2, r3]
 8002152:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d010      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	0c5b      	lsrs	r3, r3, #17
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	4a11      	ldr	r2, [pc, #68]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800216a:	5cd3      	ldrb	r3, [r2, r3]
 800216c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002172:	fb02 f203 	mul.w	r2, r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	e004      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a0c      	ldr	r2, [pc, #48]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002184:	fb02 f303 	mul.w	r3, r2, r3
 8002188:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	613b      	str	r3, [r7, #16]
      break;
 800218e:	e002      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002192:	613b      	str	r3, [r7, #16]
      break;
 8002194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002196:	693b      	ldr	r3, [r7, #16]
}
 8002198:	4618      	mov	r0, r3
 800219a:	371c      	adds	r7, #28
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	007a1200 	.word	0x007a1200
 80021ac:	08002a2c 	.word	0x08002a2c
 80021b0:	08002a3c 	.word	0x08002a3c
 80021b4:	003d0900 	.word	0x003d0900

080021b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021c0:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <RCC_Delay+0x34>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <RCC_Delay+0x38>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	0a5b      	lsrs	r3, r3, #9
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	fb02 f303 	mul.w	r3, r2, r3
 80021d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021d4:	bf00      	nop
  }
  while (Delay --);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1e5a      	subs	r2, r3, #1
 80021da:	60fa      	str	r2, [r7, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f9      	bne.n	80021d4 <RCC_Delay+0x1c>
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	20000060 	.word	0x20000060
 80021f0:	10624dd3 	.word	0x10624dd3

080021f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e041      	b.n	800228a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d106      	bne.n	8002220 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff f85a 	bl	80012d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2202      	movs	r2, #2
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3304      	adds	r3, #4
 8002230:	4619      	mov	r1, r3
 8002232:	4610      	mov	r0, r2
 8002234:	f000 fa56 	bl	80026e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d001      	beq.n	80022ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e035      	b.n	8002318 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a16      	ldr	r2, [pc, #88]	; (8002324 <HAL_TIM_Base_Start_IT+0x90>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d009      	beq.n	80022e2 <HAL_TIM_Base_Start_IT+0x4e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d6:	d004      	beq.n	80022e2 <HAL_TIM_Base_Start_IT+0x4e>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a12      	ldr	r2, [pc, #72]	; (8002328 <HAL_TIM_Base_Start_IT+0x94>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d111      	bne.n	8002306 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b06      	cmp	r3, #6
 80022f2:	d010      	beq.n	8002316 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002304:	e007      	b.n	8002316 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 0201 	orr.w	r2, r2, #1
 8002314:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40012c00 	.word	0x40012c00
 8002328:	40000400 	.word	0x40000400

0800232c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d020      	beq.n	8002390 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d01b      	beq.n	8002390 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f06f 0202 	mvn.w	r2, #2
 8002360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f998 	bl	80026ac <HAL_TIM_IC_CaptureCallback>
 800237c:	e005      	b.n	800238a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f98b 	bl	800269a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f99a 	bl	80026be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b00      	cmp	r3, #0
 8002398:	d020      	beq.n	80023dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d01b      	beq.n	80023dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0204 	mvn.w	r2, #4
 80023ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2202      	movs	r2, #2
 80023b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f972 	bl	80026ac <HAL_TIM_IC_CaptureCallback>
 80023c8:	e005      	b.n	80023d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f965 	bl	800269a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f974 	bl	80026be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d020      	beq.n	8002428 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d01b      	beq.n	8002428 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0208 	mvn.w	r2, #8
 80023f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2204      	movs	r2, #4
 80023fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f94c 	bl	80026ac <HAL_TIM_IC_CaptureCallback>
 8002414:	e005      	b.n	8002422 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f93f 	bl	800269a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f94e 	bl	80026be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b00      	cmp	r3, #0
 8002430:	d020      	beq.n	8002474 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	2b00      	cmp	r3, #0
 800243a:	d01b      	beq.n	8002474 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0210 	mvn.w	r2, #16
 8002444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2208      	movs	r2, #8
 800244a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f926 	bl	80026ac <HAL_TIM_IC_CaptureCallback>
 8002460:	e005      	b.n	800246e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f919 	bl	800269a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f928 	bl	80026be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00c      	beq.n	8002498 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f06f 0201 	mvn.w	r2, #1
 8002490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7fe feda 	bl	800124c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00c      	beq.n	80024bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d007      	beq.n	80024bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fa6f 	bl	800299a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00c      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d007      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f8f8 	bl	80026d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00c      	beq.n	8002504 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f003 0320 	and.w	r3, r3, #32
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0220 	mvn.w	r2, #32
 80024fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fa42 	bl	8002988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002504:	bf00      	nop
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_TIM_ConfigClockSource+0x1c>
 8002524:	2302      	movs	r3, #2
 8002526:	e0b4      	b.n	8002692 <HAL_TIM_ConfigClockSource+0x186>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800254e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002560:	d03e      	beq.n	80025e0 <HAL_TIM_ConfigClockSource+0xd4>
 8002562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002566:	f200 8087 	bhi.w	8002678 <HAL_TIM_ConfigClockSource+0x16c>
 800256a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800256e:	f000 8086 	beq.w	800267e <HAL_TIM_ConfigClockSource+0x172>
 8002572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002576:	d87f      	bhi.n	8002678 <HAL_TIM_ConfigClockSource+0x16c>
 8002578:	2b70      	cmp	r3, #112	; 0x70
 800257a:	d01a      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0xa6>
 800257c:	2b70      	cmp	r3, #112	; 0x70
 800257e:	d87b      	bhi.n	8002678 <HAL_TIM_ConfigClockSource+0x16c>
 8002580:	2b60      	cmp	r3, #96	; 0x60
 8002582:	d050      	beq.n	8002626 <HAL_TIM_ConfigClockSource+0x11a>
 8002584:	2b60      	cmp	r3, #96	; 0x60
 8002586:	d877      	bhi.n	8002678 <HAL_TIM_ConfigClockSource+0x16c>
 8002588:	2b50      	cmp	r3, #80	; 0x50
 800258a:	d03c      	beq.n	8002606 <HAL_TIM_ConfigClockSource+0xfa>
 800258c:	2b50      	cmp	r3, #80	; 0x50
 800258e:	d873      	bhi.n	8002678 <HAL_TIM_ConfigClockSource+0x16c>
 8002590:	2b40      	cmp	r3, #64	; 0x40
 8002592:	d058      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0x13a>
 8002594:	2b40      	cmp	r3, #64	; 0x40
 8002596:	d86f      	bhi.n	8002678 <HAL_TIM_ConfigClockSource+0x16c>
 8002598:	2b30      	cmp	r3, #48	; 0x30
 800259a:	d064      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x15a>
 800259c:	2b30      	cmp	r3, #48	; 0x30
 800259e:	d86b      	bhi.n	8002678 <HAL_TIM_ConfigClockSource+0x16c>
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	d060      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x15a>
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d867      	bhi.n	8002678 <HAL_TIM_ConfigClockSource+0x16c>
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d05c      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x15a>
 80025ac:	2b10      	cmp	r3, #16
 80025ae:	d05a      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x15a>
 80025b0:	e062      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6899      	ldr	r1, [r3, #8]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f000 f96a 	bl	800289a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	609a      	str	r2, [r3, #8]
      break;
 80025de:	e04f      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6899      	ldr	r1, [r3, #8]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f000 f953 	bl	800289a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002602:	609a      	str	r2, [r3, #8]
      break;
 8002604:	e03c      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	6859      	ldr	r1, [r3, #4]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	461a      	mov	r2, r3
 8002614:	f000 f8ca 	bl	80027ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2150      	movs	r1, #80	; 0x50
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f921 	bl	8002866 <TIM_ITRx_SetConfig>
      break;
 8002624:	e02c      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6859      	ldr	r1, [r3, #4]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	461a      	mov	r2, r3
 8002634:	f000 f8e8 	bl	8002808 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2160      	movs	r1, #96	; 0x60
 800263e:	4618      	mov	r0, r3
 8002640:	f000 f911 	bl	8002866 <TIM_ITRx_SetConfig>
      break;
 8002644:	e01c      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6859      	ldr	r1, [r3, #4]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	461a      	mov	r2, r3
 8002654:	f000 f8aa 	bl	80027ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2140      	movs	r1, #64	; 0x40
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f901 	bl	8002866 <TIM_ITRx_SetConfig>
      break;
 8002664:	e00c      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4619      	mov	r1, r3
 8002670:	4610      	mov	r0, r2
 8002672:	f000 f8f8 	bl	8002866 <TIM_ITRx_SetConfig>
      break;
 8002676:	e003      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
      break;
 800267c:	e000      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800267e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002690:	7bfb      	ldrb	r3, [r7, #15]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
	...

080026e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a2b      	ldr	r2, [pc, #172]	; (80027a4 <TIM_Base_SetConfig+0xc0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d007      	beq.n	800270c <TIM_Base_SetConfig+0x28>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002702:	d003      	beq.n	800270c <TIM_Base_SetConfig+0x28>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a28      	ldr	r2, [pc, #160]	; (80027a8 <TIM_Base_SetConfig+0xc4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d108      	bne.n	800271e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a20      	ldr	r2, [pc, #128]	; (80027a4 <TIM_Base_SetConfig+0xc0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d007      	beq.n	8002736 <TIM_Base_SetConfig+0x52>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272c:	d003      	beq.n	8002736 <TIM_Base_SetConfig+0x52>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a1d      	ldr	r2, [pc, #116]	; (80027a8 <TIM_Base_SetConfig+0xc4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d108      	bne.n	8002748 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800273c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	4313      	orrs	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a0d      	ldr	r2, [pc, #52]	; (80027a4 <TIM_Base_SetConfig+0xc0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d103      	bne.n	800277c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f023 0201 	bic.w	r2, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	611a      	str	r2, [r3, #16]
  }
}
 800279a:	bf00      	nop
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	40012c00 	.word	0x40012c00
 80027a8:	40000400 	.word	0x40000400

080027ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	f023 0201 	bic.w	r2, r3, #1
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f023 030a 	bic.w	r3, r3, #10
 80027e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	621a      	str	r2, [r3, #32]
}
 80027fe:	bf00      	nop
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	f023 0210 	bic.w	r2, r3, #16
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	031b      	lsls	r3, r3, #12
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002844:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	621a      	str	r2, [r3, #32]
}
 800285c:	bf00      	nop
 800285e:	371c      	adds	r7, #28
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002866:	b480      	push	{r7}
 8002868:	b085      	sub	sp, #20
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	f043 0307 	orr.w	r3, r3, #7
 8002888:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	609a      	str	r2, [r3, #8]
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800289a:	b480      	push	{r7}
 800289c:	b087      	sub	sp, #28
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	021a      	lsls	r2, r3, #8
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	431a      	orrs	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	609a      	str	r2, [r3, #8]
}
 80028ce:	bf00      	nop
 80028d0:	371c      	adds	r7, #28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e041      	b.n	8002974 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a14      	ldr	r2, [pc, #80]	; (8002980 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d009      	beq.n	8002948 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293c:	d004      	beq.n	8002948 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a10      	ldr	r2, [pc, #64]	; (8002984 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d10c      	bne.n	8002962 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800294e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	4313      	orrs	r3, r2
 8002958:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40012c00 	.word	0x40012c00
 8002984:	40000400 	.word	0x40000400

08002988 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <__libc_init_array>:
 80029ac:	b570      	push	{r4, r5, r6, lr}
 80029ae:	2600      	movs	r6, #0
 80029b0:	4d0c      	ldr	r5, [pc, #48]	; (80029e4 <__libc_init_array+0x38>)
 80029b2:	4c0d      	ldr	r4, [pc, #52]	; (80029e8 <__libc_init_array+0x3c>)
 80029b4:	1b64      	subs	r4, r4, r5
 80029b6:	10a4      	asrs	r4, r4, #2
 80029b8:	42a6      	cmp	r6, r4
 80029ba:	d109      	bne.n	80029d0 <__libc_init_array+0x24>
 80029bc:	f000 f822 	bl	8002a04 <_init>
 80029c0:	2600      	movs	r6, #0
 80029c2:	4d0a      	ldr	r5, [pc, #40]	; (80029ec <__libc_init_array+0x40>)
 80029c4:	4c0a      	ldr	r4, [pc, #40]	; (80029f0 <__libc_init_array+0x44>)
 80029c6:	1b64      	subs	r4, r4, r5
 80029c8:	10a4      	asrs	r4, r4, #2
 80029ca:	42a6      	cmp	r6, r4
 80029cc:	d105      	bne.n	80029da <__libc_init_array+0x2e>
 80029ce:	bd70      	pop	{r4, r5, r6, pc}
 80029d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029d4:	4798      	blx	r3
 80029d6:	3601      	adds	r6, #1
 80029d8:	e7ee      	b.n	80029b8 <__libc_init_array+0xc>
 80029da:	f855 3b04 	ldr.w	r3, [r5], #4
 80029de:	4798      	blx	r3
 80029e0:	3601      	adds	r6, #1
 80029e2:	e7f2      	b.n	80029ca <__libc_init_array+0x1e>
 80029e4:	08002a40 	.word	0x08002a40
 80029e8:	08002a40 	.word	0x08002a40
 80029ec:	08002a40 	.word	0x08002a40
 80029f0:	08002a44 	.word	0x08002a44

080029f4 <memset>:
 80029f4:	4603      	mov	r3, r0
 80029f6:	4402      	add	r2, r0
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d100      	bne.n	80029fe <memset+0xa>
 80029fc:	4770      	bx	lr
 80029fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002a02:	e7f9      	b.n	80029f8 <memset+0x4>

08002a04 <_init>:
 8002a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a06:	bf00      	nop
 8002a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0a:	bc08      	pop	{r3}
 8002a0c:	469e      	mov	lr, r3
 8002a0e:	4770      	bx	lr

08002a10 <_fini>:
 8002a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a12:	bf00      	nop
 8002a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a16:	bc08      	pop	{r3}
 8002a18:	469e      	mov	lr, r3
 8002a1a:	4770      	bx	lr
